
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  0000147c  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800334  00800334  00001744  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029e9  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001106  00000000  00000000  0000441d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001231  00000000  00000000  00005523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000520  00000000  00000000  00006754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000876  00000000  00000000  00006c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001299  00000000  00000000  000074ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00008783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <fdevopen+0x12>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e7       	ldi	r30, 0x7C	; 124
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 33       	cpi	r26, 0x34	; 52
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a4 e3       	ldi	r26, 0x34	; 52
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 33       	cpi	r26, 0x3E	; 62
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <main>
     39e:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <main>:
#include <util/delay.h>
#include <stdbool.h>


int main()
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	66 97       	sbiw	r28, 0x16	; 22
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
    // Initialize
    gpio_init();
     3ba:	0e 94 81 03 	call	0x702	; 0x702 <gpio_init>
    xmem_init();
     3be:	0e 94 93 05 	call	0xb26	; 0xb26 <xmem_init>
    uart_init();
     3c2:	0e 94 81 05 	call	0xb02	; 0xb02 <uart_init>
    oled_init();
     3c6:	0e 94 ac 04 	call	0x958	; 0x958 <oled_init>
    menu_init();
     3ca:	0e 94 4f 04 	call	0x89e	; 0x89e <menu_init>
    can_init();
     3ce:	0e 94 4d 02 	call	0x49a	; 0x49a <can_init>

    // Try to send a message
    can_message message;
    message.id = 3;
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	9a 83       	std	Y+2, r25	; 0x02
     3d8:	89 83       	std	Y+1, r24	; 0x01
    message.length = 2;
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	8b 83       	std	Y+3, r24	; 0x03
    message.data[0] = 'U';
     3de:	85 e5       	ldi	r24, 0x55	; 85
     3e0:	8c 83       	std	Y+4, r24	; 0x04
    message.data[1] = 'X';
     3e2:	88 e5       	ldi	r24, 0x58	; 88
     3e4:	8d 83       	std	Y+5, r24	; 0x05
        const can_message can_msg = can_receive();

        // Print received message
        if (can_msg.length > 0) {
            printf("--- Message Received ---\n");
            printf("ID: %d   -   Length: %d\n", can_msg.id, can_msg.length);
     3e6:	0f 2e       	mov	r0, r31
     3e8:	ff e2       	ldi	r31, 0x2F	; 47
     3ea:	8f 2e       	mov	r8, r31
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	9f 2e       	mov	r9, r31
     3f0:	f0 2d       	mov	r31, r0
            for (int i = 0; i < can_msg.length; i++) {
                printf("D%d: %c\n", i, can_msg.data[i]);
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f8 e4       	ldi	r31, 0x48	; 72
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	df 2e       	mov	r13, r31
     3fc:	f0 2d       	mov	r31, r0
    message.data[1] = 'X';

    // Main program loop
    while (true) {
        // Send message
        can_send(&message);
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 66 02 	call	0x4cc	; 0x4cc <can_send>

        // Received message
        const can_message can_msg = can_receive();
     406:	ce 01       	movw	r24, r28
     408:	0c 96       	adiw	r24, 0x0c	; 12
     40a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <can_receive>
     40e:	1e 85       	ldd	r17, Y+14	; 0x0e

        // Print received message
        if (can_msg.length > 0) {
     410:	11 23       	and	r17, r17
     412:	c9 f1       	breq	.+114    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
            printf("--- Message Received ---\n");
     414:	86 e1       	ldi	r24, 0x16	; 22
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
            printf("ID: %d   -   Length: %d\n", can_msg.id, can_msg.length);
     41c:	a1 2e       	mov	r10, r17
     41e:	b1 2c       	mov	r11, r1
     420:	1f 92       	push	r1
     422:	1f 93       	push	r17
     424:	8d 85       	ldd	r24, Y+13	; 0x0d
     426:	8f 93       	push	r24
     428:	8c 85       	ldd	r24, Y+12	; 0x0c
     42a:	8f 93       	push	r24
     42c:	9f 92       	push	r9
     42e:	8f 92       	push	r8
     430:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <printf>
            for (int i = 0; i < can_msg.length; i++) {
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	1a 14       	cp	r1, r10
     442:	1b 04       	cpc	r1, r11
     444:	e4 f4       	brge	.+56     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     446:	7e 01       	movw	r14, r28
     448:	2f e0       	ldi	r18, 0x0F	; 15
     44a:	e2 0e       	add	r14, r18
     44c:	f1 1c       	adc	r15, r1
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	10 e0       	ldi	r17, 0x00	; 0
                printf("D%d: %c\n", i, can_msg.data[i]);
     452:	f7 01       	movw	r30, r14
     454:	81 91       	ld	r24, Z+
     456:	7f 01       	movw	r14, r30
     458:	1f 92       	push	r1
     45a:	8f 93       	push	r24
     45c:	1f 93       	push	r17
     45e:	0f 93       	push	r16
     460:	df 92       	push	r13
     462:	cf 92       	push	r12
     464:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <printf>

        // Print received message
        if (can_msg.length > 0) {
            printf("--- Message Received ---\n");
            printf("ID: %d   -   Length: %d\n", can_msg.id, can_msg.length);
            for (int i = 0; i < can_msg.length; i++) {
     468:	0f 5f       	subi	r16, 0xFF	; 255
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	a0 16       	cp	r10, r16
     47a:	b1 06       	cpc	r11, r17
     47c:	51 f7       	brne	.-44     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
                printf("D%d: %c\n", i, can_msg.data[i]);
            }
            printf("\n");
     47e:	8a e0       	ldi	r24, 0x0A	; 10
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     486:	ff e9       	ldi	r31, 0x9F	; 159
     488:	26 e8       	ldi	r18, 0x86	; 134
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	f1 50       	subi	r31, 0x01	; 1
     48e:	20 40       	sbci	r18, 0x00	; 0
     490:	80 40       	sbci	r24, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     496:	00 00       	nop
        }

        _delay_ms(500); 
    }
     498:	b2 cf       	rjmp	.-156    	; 0x3fe <main+0x58>

0000049a <can_init>:
#define CANCTRL_REG XFh // Remove this probably (100%)

void can_init()
{
    // -Initialize loop back mode
    mcp_init(MODE_LOOPBACK); // Set MCP2515 mode
     49a:	80 e4       	ldi	r24, 0x40	; 64
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 bd 03 	call	0x77a	; 0x77a <mcp_init>
    mcp_write(MCP_CANINTE, MCP_RX_INT); // Set interrupt enable
     4a2:	63 e0       	ldi	r22, 0x03	; 3
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	8b e2       	ldi	r24, 0x2B	; 43
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 a9 03 	call	0x752	; 0x752 <mcp_write>
    mcp_write(MCP_CANINTE, MCP_TX_INT); // Set interrupt enable
     4ae:	6c e1       	ldi	r22, 0x1C	; 28
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	8b e2       	ldi	r24, 0x2B	; 43
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 a9 03 	call	0x752	; 0x752 <mcp_write>

    printf("<CAN is ready>");
     4ba:	81 e5       	ldi	r24, 0x51	; 81
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <printf>
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	08 95       	ret

000004cc <can_send>:

void can_send(can_message* message)
{
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	28 97       	sbiw	r28, 0x08	; 8
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	6c 01       	movw	r12, r24
    // Check that we can send
    if (!(mcp_read(MCP_TXB0CTRL) & MCP_TXREQ_MASK)) {
     4f2:	80 e3       	ldi	r24, 0x30	; 48
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     4fa:	83 ff       	sbrs	r24, 3
     4fc:	61 c0       	rjmp	.+194    	; 0x5c0 <__stack+0xc1>
        //printf("Transmitt not ready\n");
        return;
    }

    // Set ID and data-length
    mcp_bit_mod(MCP_TXB0SIDL, 0b11100000, message->id << 5); // Set the ID (high)
     4fe:	f6 01       	movw	r30, r12
     500:	40 81       	ld	r20, Z
     502:	51 81       	ldd	r21, Z+1	; 0x01
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	42 95       	swap	r20
     50a:	52 95       	swap	r21
     50c:	50 7f       	andi	r21, 0xF0	; 240
     50e:	54 27       	eor	r21, r20
     510:	40 7f       	andi	r20, 0xF0	; 240
     512:	54 27       	eor	r21, r20
     514:	60 ee       	ldi	r22, 0xE0	; 224
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	82 e3       	ldi	r24, 0x32	; 50
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 12 04 	call	0x824	; 0x824 <mcp_bit_mod>
    mcp_write(MCP_TXB0DLC, message->length); // Set the length
     520:	f6 01       	movw	r30, r12
     522:	62 81       	ldd	r22, Z+2	; 0x02
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	85 e3       	ldi	r24, 0x35	; 53
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 a9 03 	call	0x752	; 0x752 <mcp_write>
    // Clear bits ATBF, MLOA, TXERR in TXB0CTRL register
    //mcp_bit_mod(MCP_TXB0CTRL, MCP_ATBF_MASK, 0);
    //mcp_bit_mod(MCP_TXB0CTRL, MCP_MLOA_MASK, 0);
    //mcp_bit_mod(MCP_TXB0CTRL, MCP_TXERR_MASK, 0);

    const uint8_t buffer_addr[8] = { 0x36, 0x37, 0x38, 0x39,
     52e:	88 e0       	ldi	r24, 0x08	; 8
     530:	e6 e0       	ldi	r30, 0x06	; 6
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	de 01       	movw	r26, r28
     536:	11 96       	adiw	r26, 0x01	; 1
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	8a 95       	dec	r24
     53e:	e1 f7       	brne	.-8      	; 0x538 <__stack+0x39>
        0x3A, 0x3B, 0x3C, 0x3D };

    // Load the transmitt data buffer with data
    for (int i = 0; i < message->length; i++) {
     540:	f6 01       	movw	r30, r12
     542:	82 81       	ldd	r24, Z+2	; 0x02
     544:	88 23       	and	r24, r24
     546:	e1 f0       	breq	.+56     	; 0x580 <__stack+0x81>
     548:	76 01       	movw	r14, r12
     54a:	f3 e0       	ldi	r31, 0x03	; 3
     54c:	ef 0e       	add	r14, r31
     54e:	f1 1c       	adc	r15, r1
     550:	8e 01       	movw	r16, r28
     552:	0f 5f       	subi	r16, 0xFF	; 255
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	a1 2c       	mov	r10, r1
     558:	b1 2c       	mov	r11, r1
        mcp_write(buffer_addr[i], message->data[i]);
     55a:	f7 01       	movw	r30, r14
     55c:	61 91       	ld	r22, Z+
     55e:	7f 01       	movw	r14, r30
     560:	f8 01       	movw	r30, r16
     562:	81 91       	ld	r24, Z+
     564:	8f 01       	movw	r16, r30
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 a9 03 	call	0x752	; 0x752 <mcp_write>

    const uint8_t buffer_addr[8] = { 0x36, 0x37, 0x38, 0x39,
        0x3A, 0x3B, 0x3C, 0x3D };

    // Load the transmitt data buffer with data
    for (int i = 0; i < message->length; i++) {
     56e:	ff ef       	ldi	r31, 0xFF	; 255
     570:	af 1a       	sub	r10, r31
     572:	bf 0a       	sbc	r11, r31
     574:	f6 01       	movw	r30, r12
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a8 16       	cp	r10, r24
     57c:	b9 06       	cpc	r11, r25
     57e:	6c f3       	brlt	.-38     	; 0x55a <__stack+0x5b>
        mcp_write(buffer_addr[i], message->data[i]);
    }

    // Set bit to start transmission, may be removed?
    mcp_bit_mod(MCP_TXB0CTRL, MCP_TXREQ_MASK, 1);
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	68 e0       	ldi	r22, 0x08	; 8
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e3       	ldi	r24, 0x30	; 48
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 12 04 	call	0x824	; 0x824 <mcp_bit_mod>

    while (!(!(mcp_read(MCP_TXB0CTRL) & MCP_TXREQ_MASK) && (mcp_read(MCP_CANINTF) & MCP_RX0IF)))
     590:	80 e3       	ldi	r24, 0x30	; 48
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     598:	83 fd       	sbrc	r24, 3
     59a:	fa cf       	rjmp	.-12     	; 0x590 <__stack+0x91>
     59c:	8c e2       	ldi	r24, 0x2C	; 44
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     5a4:	80 ff       	sbrs	r24, 0
     5a6:	f4 cf       	rjmp	.-24     	; 0x590 <__stack+0x91>
        ;

    printf("Message has been transmitted!\n");
     5a8:	80 e6       	ldi	r24, 0x60	; 96
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>

    mcp_bit_mod(MCP_TXB0CTRL, MCP_TXREQ_MASK, 1);
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	68 e0       	ldi	r22, 0x08	; 8
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e3       	ldi	r24, 0x30	; 48
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 12 04 	call	0x824	; 0x824 <mcp_bit_mod>
    //mcp_rts(); // Request to send
    //can_transmit_complete(); // Sets transmit as complete
}
     5c0:	28 96       	adiw	r28, 0x08	; 8
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	df 90       	pop	r13
     5da:	cf 90       	pop	r12
     5dc:	bf 90       	pop	r11
     5de:	af 90       	pop	r10
     5e0:	08 95       	ret

000005e2 <can_receive>:

can_message can_receive()
{
     5e2:	5f 92       	push	r5
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	63 97       	sbiw	r28, 0x13	; 19
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	4c 01       	movw	r8, r24
    // Proceed only if RXB0 or RX1 interrupt
    if (!(mcp_read(MCP_CANINTF) & MCP_RX0IF))
     612:	8c e2       	ldi	r24, 0x2C	; 44
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     61a:	80 fd       	sbrc	r24, 0
     61c:	06 c0       	rjmp	.+12     	; 0x62a <can_receive+0x48>
        return (can_message) { 0 };
     61e:	8b e0       	ldi	r24, 0x0B	; 11
     620:	d4 01       	movw	r26, r8
     622:	1d 92       	st	X+, r1
     624:	8a 95       	dec	r24
     626:	e9 f7       	brne	.-6      	; 0x622 <can_receive+0x40>
     628:	55 c0       	rjmp	.+170    	; 0x6d4 <can_receive+0xf2>
    //else if (!(mcp_read(MCP_CANINTF) & MCP_RX1IF))  return {0};

    can_message rx_msg = { 0 };
     62a:	fe 01       	movw	r30, r28
     62c:	31 96       	adiw	r30, 0x01	; 1
     62e:	8b e0       	ldi	r24, 0x0B	; 11
     630:	df 01       	movw	r26, r30
     632:	1d 92       	st	X+, r1
     634:	8a 95       	dec	r24
     636:	e9 f7       	brne	.-6      	; 0x632 <can_receive+0x50>
    rx_msg.id = mcp_read(MCP_RXB0SIDL) >> 5;
     638:	82 e6       	ldi	r24, 0x62	; 98
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     640:	3c 01       	movw	r6, r24
     642:	75 94       	asr	r7
     644:	67 94       	ror	r6
     646:	75 94       	asr	r7
     648:	67 94       	ror	r6
     64a:	75 94       	asr	r7
     64c:	67 94       	ror	r6
     64e:	75 94       	asr	r7
     650:	67 94       	ror	r6
     652:	75 94       	asr	r7
     654:	67 94       	ror	r6
    rx_msg.length = mcp_read(MCP_RXB0DLC) & 0x0f;
     656:	85 e6       	ldi	r24, 0x65	; 101
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     65e:	8f 70       	andi	r24, 0x0F	; 15
     660:	58 2e       	mov	r5, r24

    // Addresses of data receive buffer. Where the rx data is stored
    const uint8_t rx_data_buff_addr[8] = { 0x66, 0x67, 0x68, 0x69,
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	ee e0       	ldi	r30, 0x0E	; 14
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	de 01       	movw	r26, r28
     66a:	1c 96       	adiw	r26, 0x0c	; 12
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <can_receive+0x8a>
        0x6A, 0x6B, 0x6C, 0x6D };

    // Protect against extended length and out of array index
    const int length = (rx_msg.length > 8 ? 8 : rx_msg.length);
     674:	b8 e0       	ldi	r27, 0x08	; 8
     676:	b5 15       	cp	r27, r5
     678:	30 f0       	brcs	.+12     	; 0x686 <can_receive+0xa4>
     67a:	a5 2c       	mov	r10, r5
     67c:	b1 2c       	mov	r11, r1
    for (int i = 0; i < length; i++) {
     67e:	1a 14       	cp	r1, r10
     680:	1b 04       	cpc	r1, r11
     682:	2c f0       	brlt	.+10     	; 0x68e <can_receive+0xac>
     684:	1c c0       	rjmp	.+56     	; 0x6be <can_receive+0xdc>
    // Addresses of data receive buffer. Where the rx data is stored
    const uint8_t rx_data_buff_addr[8] = { 0x66, 0x67, 0x68, 0x69,
        0x6A, 0x6B, 0x6C, 0x6D };

    // Protect against extended length and out of array index
    const int length = (rx_msg.length > 8 ? 8 : rx_msg.length);
     686:	68 94       	set
     688:	aa 24       	eor	r10, r10
     68a:	a3 f8       	bld	r10, 3
     68c:	b1 2c       	mov	r11, r1
     68e:	6e 01       	movw	r12, r28
     690:	ec e0       	ldi	r30, 0x0C	; 12
     692:	ce 0e       	add	r12, r30
     694:	d1 1c       	adc	r13, r1
     696:	7e 01       	movw	r14, r28
     698:	f4 e0       	ldi	r31, 0x04	; 4
     69a:	ef 0e       	add	r14, r31
     69c:	f1 1c       	adc	r15, r1
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	10 e0       	ldi	r17, 0x00	; 0
    for (int i = 0; i < length; i++) {
        rx_msg.data[i] = mcp_read(rx_data_buff_addr[i]);
     6a2:	d6 01       	movw	r26, r12
     6a4:	8d 91       	ld	r24, X+
     6a6:	6d 01       	movw	r12, r26
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     6ae:	f7 01       	movw	r30, r14
     6b0:	81 93       	st	Z+, r24
     6b2:	7f 01       	movw	r14, r30
    const uint8_t rx_data_buff_addr[8] = { 0x66, 0x67, 0x68, 0x69,
        0x6A, 0x6B, 0x6C, 0x6D };

    // Protect against extended length and out of array index
    const int length = (rx_msg.length > 8 ? 8 : rx_msg.length);
    for (int i = 0; i < length; i++) {
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	0a 15       	cp	r16, r10
     6ba:	1b 05       	cpc	r17, r11
     6bc:	94 f3       	brlt	.-28     	; 0x6a2 <can_receive+0xc0>
        rx_msg.data[i] = mcp_read(rx_data_buff_addr[i]);
    }

    return rx_msg;
     6be:	7a 82       	std	Y+2, r7	; 0x02
     6c0:	69 82       	std	Y+1, r6	; 0x01
     6c2:	5b 82       	std	Y+3, r5	; 0x03
     6c4:	8b e0       	ldi	r24, 0x0B	; 11
     6c6:	fe 01       	movw	r30, r28
     6c8:	31 96       	adiw	r30, 0x01	; 1
     6ca:	d4 01       	movw	r26, r8
     6cc:	01 90       	ld	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	8a 95       	dec	r24
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <can_receive+0xea>
}
     6d4:	c4 01       	movw	r24, r8
     6d6:	63 96       	adiw	r28, 0x13	; 19
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	08 95       	ret

00000702 <gpio_init>:
#include "../inc/gpio_defines.h"

/** Set up gpio pins */
void gpio_init()
{
    SET_PORT(DDRB, OUTPUT, PORTB, PIN_LED, HIGH); // Turn status LED on
     702:	b8 9a       	sbi	0x17, 0	; 23
     704:	c0 9a       	sbi	0x18, 0	; 24
    SET_PORT(DDRB, INPUT, PORTB, PIN_LBUT, LOW); // Set left button to input
     706:	b9 98       	cbi	0x17, 1	; 23
     708:	c1 98       	cbi	0x18, 1	; 24
    SET_PORT(DDRB, INPUT, PORTB, PIN_RBUT, LOW); // Set right button to input
     70a:	ba 98       	cbi	0x17, 2	; 23
     70c:	c2 98       	cbi	0x18, 2	; 24
    SET_PORT(DDRB, INPUT, PORTB, PIN_RBUT, LOW); // Set joystick button to input
     70e:	ba 98       	cbi	0x17, 2	; 23
     710:	c2 98       	cbi	0x18, 2	; 24
     712:	08 95       	ret

00000714 <mcp_activate>:
    read = spi_read();

    mcp_deactivate();

    return read;
}
     714:	88 b3       	in	r24, 0x18	; 24
     716:	88 bb       	out	0x18, r24	; 24
     718:	08 95       	ret

0000071a <mcp_deactivate>:
     71a:	c4 9a       	sbi	0x18, 4	; 24
     71c:	08 95       	ret

0000071e <mcp_reset>:
     71e:	0e 94 8a 03 	call	0x714	; 0x714 <mcp_activate>
     722:	80 ec       	ldi	r24, 0xC0	; 192
     724:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
     728:	0e 94 8d 03 	call	0x71a	; 0x71a <mcp_deactivate>
     72c:	08 95       	ret

0000072e <mcp_read>:
     72e:	cf 93       	push	r28
     730:	c8 2f       	mov	r28, r24
     732:	0e 94 8a 03 	call	0x714	; 0x714 <mcp_activate>
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
     73c:	8c 2f       	mov	r24, r28
     73e:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
     742:	0e 94 6a 05 	call	0xad4	; 0xad4 <spi_read>
     746:	c8 2f       	mov	r28, r24
     748:	0e 94 8d 03 	call	0x71a	; 0x71a <mcp_deactivate>
     74c:	8c 2f       	mov	r24, r28
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <mcp_write>:
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	d8 2f       	mov	r29, r24
     758:	c6 2f       	mov	r28, r22
     75a:	0e 94 8a 03 	call	0x714	; 0x714 <mcp_activate>
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
     764:	8d 2f       	mov	r24, r29
     766:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
     76a:	8c 2f       	mov	r24, r28
     76c:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
     770:	0e 94 8d 03 	call	0x71a	; 0x71a <mcp_deactivate>
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <mcp_init>:
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	d8 2f       	mov	r29, r24
     780:	0e 94 5f 05 	call	0xabe	; 0xabe <spi_init>
     784:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_reset>
     788:	8e e0       	ldi	r24, 0x0E	; 14
     78a:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     78e:	80 7e       	andi	r24, 0xE0	; 224
     790:	80 38       	cpi	r24, 0x80	; 128
     792:	31 f0       	breq	.+12     	; 0x7a0 <mcp_init+0x26>
     794:	8e e7       	ldi	r24, 0x7E	; 126
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	3f c0       	rjmp	.+126    	; 0x81e <mcp_init+0xa4>
     7a0:	6d 2f       	mov	r22, r29
     7a2:	8f e0       	ldi	r24, 0x0F	; 15
     7a4:	0e 94 a9 03 	call	0x752	; 0x752 <mcp_write>
     7a8:	8e e0       	ldi	r24, 0x0E	; 14
     7aa:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_read>
     7ae:	c8 2f       	mov	r28, r24
     7b0:	c0 7e       	andi	r28, 0xE0	; 224
     7b2:	cd 17       	cp	r28, r29
     7b4:	31 f0       	breq	.+12     	; 0x7c2 <mcp_init+0x48>
     7b6:	82 eb       	ldi	r24, 0xB2	; 178
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	2e c0       	rjmp	.+92     	; 0x81e <mcp_init+0xa4>
     7c2:	c1 11       	cpse	r28, r1
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <mcp_init+0x56>
     7c6:	89 ed       	ldi	r24, 0xD9	; 217
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     7ce:	0e c0       	rjmp	.+28     	; 0x7ec <mcp_init+0x72>
     7d0:	c0 32       	cpi	r28, 0x20	; 32
     7d2:	29 f4       	brne	.+10     	; 0x7de <mcp_init+0x64>
     7d4:	8a ef       	ldi	r24, 0xFA	; 250
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <mcp_init+0x82>
     7de:	c0 34       	cpi	r28, 0x40	; 64
     7e0:	29 f4       	brne	.+10     	; 0x7ec <mcp_init+0x72>
     7e2:	8a e1       	ldi	r24, 0x1A	; 26
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     7ea:	10 c0       	rjmp	.+32     	; 0x80c <mcp_init+0x92>
     7ec:	c0 36       	cpi	r28, 0x60	; 96
     7ee:	31 f4       	brne	.+12     	; 0x7fc <mcp_init+0x82>
     7f0:	8d e3       	ldi	r24, 0x3D	; 61
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	11 c0       	rjmp	.+34     	; 0x81e <mcp_init+0xa4>
     7fc:	c0 38       	cpi	r28, 0x80	; 128
     7fe:	31 f4       	brne	.+12     	; 0x80c <mcp_init+0x92>
     800:	83 e6       	ldi	r24, 0x63	; 99
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	09 c0       	rjmp	.+18     	; 0x81e <mcp_init+0xa4>
     80c:	c0 3e       	cpi	r28, 0xE0	; 224
     80e:	31 f4       	brne	.+12     	; 0x81c <mcp_init+0xa2>
     810:	82 e8       	ldi	r24, 0x82	; 130
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	01 c0       	rjmp	.+2      	; 0x81e <mcp_init+0xa4>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <mcp_bit_mod>:

void mcp_bit_mod(uint8_t address, uint8_t mask, uint8_t data)
{
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	18 2f       	mov	r17, r24
     82c:	d6 2f       	mov	r29, r22
     82e:	c4 2f       	mov	r28, r20
    mcp_activate();
     830:	0e 94 8a 03 	call	0x714	; 0x714 <mcp_activate>

    spi_write(MCP_BITMOD);
     834:	85 e0       	ldi	r24, 0x05	; 5
     836:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
    spi_write(address);
     83a:	81 2f       	mov	r24, r17
     83c:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
    spi_write(mask);
     840:	8d 2f       	mov	r24, r29
     842:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
    spi_write(data);
     846:	8c 2f       	mov	r24, r28
     848:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>

    mcp_deactivate();
     84c:	0e 94 8d 03 	call	0x71a	; 0x71a <mcp_deactivate>
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	08 95       	ret

00000858 <menu_print>:
	menu_print();
}

void menu_print()
{	
	oled_reset();
     858:	0e 94 9c 04 	call	0x938	; 0x938 <oled_reset>
	oled_goto_line(0);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
	oled_print("--- Home ---");
     864:	83 ea       	ldi	r24, 0xA3	; 163
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
	
	oled_goto_line(2);
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
	oled_print("Play");
     874:	80 eb       	ldi	r24, 0xB0	; 176
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
	
	oled_goto_line(4);
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
	oled_print("Highscore");
     884:	85 eb       	ldi	r24, 0xB5	; 181
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
	
	oled_goto_line(6);	
     88c:	86 e0       	ldi	r24, 0x06	; 6
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
	oled_print("About");
     894:	8f eb       	ldi	r24, 0xBF	; 191
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
     89c:	08 95       	ret

0000089e <menu_init>:
#include "../inc/menu.h"
#include "../inc/oled.h"

void menu_init()
{
	oled_print("WELCOME!");
     89e:	85 ec       	ldi	r24, 0xC5	; 197
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_print>
	oled_pos(4, 0);
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	84 e0       	ldi	r24, 0x04	; 4
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 7f 04 	call	0x8fe	; 0x8fe <oled_pos>
	oled_print_inv("*ENTER GAME*");
     8b2:	8e ec       	ldi	r24, 0xCE	; 206
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <oled_print_inv>
     8ba:	2f ef       	ldi	r18, 0xFF	; 255
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	9c e2       	ldi	r25, 0x2C	; 44
     8c0:	21 50       	subi	r18, 0x01	; 1
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	90 40       	sbci	r25, 0x00	; 0
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <menu_init+0x22>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <menu_init+0x2c>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <menu_init+0x2e>
	
	// Wait to display welcome screen
	//oled_print_logo();
	_delay_ms(3000);
	
	menu_print();
     8cc:	0e 94 2c 04 	call	0x858	; 0x858 <menu_print>
     8d0:	08 95       	ret

000008d2 <oled_goto_column>:


void oled_write_cmd(uint8_t cmd)		// Write command
{
	volatile char* ext_oled_cmd = (char *) OLED_CMD_ADR;		// Start address for OLED command
	ext_oled_cmd[0] = cmd;		                                    // write command
     8d2:	98 2f       	mov	r25, r24
     8d4:	9f 70       	andi	r25, 0x0F	; 15
     8d6:	e0 e0       	ldi	r30, 0x00	; 0
     8d8:	f0 e1       	ldi	r31, 0x10	; 16
     8da:	90 83       	st	Z, r25
     8dc:	82 95       	swap	r24
     8de:	8f 70       	andi	r24, 0x0F	; 15
     8e0:	80 5f       	subi	r24, 0xF0	; 240
     8e2:	80 83       	st	Z, r24
     8e4:	08 95       	ret

000008e6 <oled_goto_line>:
     8e6:	80 55       	subi	r24, 0x50	; 80
     8e8:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xcc2>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 69 04 	call	0x8d2	; 0x8d2 <oled_goto_column>
     8f2:	08 95       	ret

000008f4 <oled_home>:
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
     8fc:	08 95       	ret

000008fe <oled_pos>:
     8fe:	cf 93       	push	r28
     900:	c6 2f       	mov	r28, r22
     902:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
     906:	8c 2f       	mov	r24, r28
     908:	0e 94 69 04 	call	0x8d2	; 0x8d2 <oled_goto_column>
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <oled_clear_line>:
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <oled_pos>
     91e:	80 e8       	ldi	r24, 0x80	; 128
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	e0 e0       	ldi	r30, 0x00	; 0
     924:	f2 e1       	ldi	r31, 0x12	; 18
     926:	10 82       	st	Z, r1
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	e9 f7       	brne	.-6      	; 0x926 <oled_clear_line+0x16>
     92c:	ce 01       	movw	r24, r28
     92e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <oled_goto_line>
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <oled_reset>:
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	c0 e0       	ldi	r28, 0x00	; 0
     93e:	d0 e0       	ldi	r29, 0x00	; 0
     940:	ce 01       	movw	r24, r28
     942:	0e 94 88 04 	call	0x910	; 0x910 <oled_clear_line>
     946:	21 96       	adiw	r28, 0x01	; 1
     948:	c8 30       	cpi	r28, 0x08	; 8
     94a:	d1 05       	cpc	r29, r1
     94c:	c9 f7       	brne	.-14     	; 0x940 <oled_reset+0x8>
     94e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_home>
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <oled_init>:
     958:	e0 e0       	ldi	r30, 0x00	; 0
     95a:	f0 e1       	ldi	r31, 0x10	; 16
     95c:	8e ea       	ldi	r24, 0xAE	; 174
     95e:	80 83       	st	Z, r24
     960:	81 ea       	ldi	r24, 0xA1	; 161
     962:	80 83       	st	Z, r24
     964:	8a ed       	ldi	r24, 0xDA	; 218
     966:	80 83       	st	Z, r24
     968:	82 e1       	ldi	r24, 0x12	; 18
     96a:	80 83       	st	Z, r24
     96c:	88 ec       	ldi	r24, 0xC8	; 200
     96e:	80 83       	st	Z, r24
     970:	88 ea       	ldi	r24, 0xA8	; 168
     972:	80 83       	st	Z, r24
     974:	8f e3       	ldi	r24, 0x3F	; 63
     976:	80 83       	st	Z, r24
     978:	85 ed       	ldi	r24, 0xD5	; 213
     97a:	80 83       	st	Z, r24
     97c:	80 e8       	ldi	r24, 0x80	; 128
     97e:	80 83       	st	Z, r24
     980:	81 e8       	ldi	r24, 0x81	; 129
     982:	80 83       	st	Z, r24
     984:	80 e5       	ldi	r24, 0x50	; 80
     986:	80 83       	st	Z, r24
     988:	89 ed       	ldi	r24, 0xD9	; 217
     98a:	80 83       	st	Z, r24
     98c:	81 e2       	ldi	r24, 0x21	; 33
     98e:	80 83       	st	Z, r24
     990:	80 e2       	ldi	r24, 0x20	; 32
     992:	80 83       	st	Z, r24
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	80 83       	st	Z, r24
     998:	8b ed       	ldi	r24, 0xDB	; 219
     99a:	80 83       	st	Z, r24
     99c:	80 e3       	ldi	r24, 0x30	; 48
     99e:	80 83       	st	Z, r24
     9a0:	8d ea       	ldi	r24, 0xAD	; 173
     9a2:	80 83       	st	Z, r24
     9a4:	10 82       	st	Z, r1
     9a6:	84 ea       	ldi	r24, 0xA4	; 164
     9a8:	80 83       	st	Z, r24
     9aa:	86 ea       	ldi	r24, 0xA6	; 166
     9ac:	80 83       	st	Z, r24
     9ae:	8f ea       	ldi	r24, 0xAF	; 175
     9b0:	80 83       	st	Z, r24
     9b2:	0e 94 9c 04 	call	0x938	; 0x938 <oled_reset>
     9b6:	08 95       	ret

000009b8 <oled_put_char>:
}


void oled_put_char(unsigned char c)		// Put character
{
     9b8:	80 52       	subi	r24, 0x20	; 32
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9c 01       	movw	r18, r24
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	22 0f       	add	r18, r18
     9c4:	33 1f       	adc	r19, r19
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	20 59       	subi	r18, 0x90	; 144
     9cc:	3f 4f       	sbci	r19, 0xFF	; 255
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	88 58       	subi	r24, 0x88	; 136
     9dc:	9f 4f       	sbci	r25, 0xFF	; 255


void oled_write_data(uint8_t data)		// Write char to screen
{
    volatile char* ext_oled_data = (char *) OLED_DATA_ADR;		// Start address for OLED data
    ext_oled_data[0] = data;
     9de:	a0 e0       	ldi	r26, 0x00	; 0
     9e0:	b2 e1       	ldi	r27, 0x12	; 18
{
	uint8_t print_char = c - 32;
	uint8_t font_size  = 8;				// Size of the different fonts. Needs to be calculated.
	
	for (int i = 0; i < font_size; i++)
		oled_write_data(pgm_read_word(&font8[print_char][i]));
     9e2:	f9 01       	movw	r30, r18
     9e4:	45 91       	lpm	r20, Z+
     9e6:	54 91       	lpm	r21, Z


void oled_write_data(uint8_t data)		// Write char to screen
{
    volatile char* ext_oled_data = (char *) OLED_DATA_ADR;		// Start address for OLED data
    ext_oled_data[0] = data;
     9e8:	4c 93       	st	X, r20
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
     9ec:	3f 4f       	sbci	r19, 0xFF	; 255
void oled_put_char(unsigned char c)		// Put character
{
	uint8_t print_char = c - 32;
	uint8_t font_size  = 8;				// Size of the different fonts. Needs to be calculated.
	
	for (int i = 0; i < font_size; i++)
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	b9 f7       	brne	.-18     	; 0x9e2 <oled_put_char+0x2a>
		oled_write_data(pgm_read_word(&font8[print_char][i]));
}
     9f4:	08 95       	ret

000009f6 <oled_put_char_inv>:

void oled_put_char_inv(unsigned char c)	// Put inverted character
{
     9f6:	80 52       	subi	r24, 0x20	; 32
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	9c 01       	movw	r18, r24
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	20 59       	subi	r18, 0x90	; 144
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	88 58       	subi	r24, 0x88	; 136
     a1a:	9f 4f       	sbci	r25, 0xFF	; 255


void oled_write_data(uint8_t data)		// Write char to screen
{
    volatile char* ext_oled_data = (char *) OLED_DATA_ADR;		// Start address for OLED data
    ext_oled_data[0] = data;
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b2 e1       	ldi	r27, 0x12	; 18
{
	uint8_t print_char = c - 32;
	uint8_t font_size  = 8;				// Size of the different fonts. Needs to be calculated.
	
	for (int i = 0; i < font_size; i++)
		oled_write_data(~pgm_read_word(&font8[print_char][i]));
     a20:	f9 01       	movw	r30, r18
     a22:	45 91       	lpm	r20, Z+
     a24:	54 91       	lpm	r21, Z
     a26:	40 95       	com	r20


void oled_write_data(uint8_t data)		// Write char to screen
{
    volatile char* ext_oled_data = (char *) OLED_DATA_ADR;		// Start address for OLED data
    ext_oled_data[0] = data;
     a28:	4c 93       	st	X, r20
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
void oled_put_char_inv(unsigned char c)	// Put inverted character
{
	uint8_t print_char = c - 32;
	uint8_t font_size  = 8;				// Size of the different fonts. Needs to be calculated.
	
	for (int i = 0; i < font_size; i++)
     a2e:	28 17       	cp	r18, r24
     a30:	39 07       	cpc	r19, r25
     a32:	b1 f7       	brne	.-20     	; 0xa20 <oled_put_char_inv+0x2a>
		oled_write_data(~pgm_read_word(&font8[print_char][i]));
}
     a34:	08 95       	ret

00000a36 <oled_print>:

void oled_print(char* str)			// Print text to screen
{			
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	8c 01       	movw	r16, r24
     a44:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(str); i++)
     a46:	c0 e0       	ldi	r28, 0x00	; 0
     a48:	d0 e0       	ldi	r29, 0x00	; 0
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <oled_print+0x22>
		oled_put_char(str[i]);					// write to screen
     a4c:	f7 01       	movw	r30, r14
     a4e:	81 91       	ld	r24, Z+
     a50:	7f 01       	movw	r14, r30
     a52:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <oled_put_char>
		oled_write_data(~pgm_read_word(&font8[print_char][i]));
}

void oled_print(char* str)			// Print text to screen
{			
	for (int i = 0; i < strlen(str); i++)
     a56:	21 96       	adiw	r28, 0x01	; 1
     a58:	f8 01       	movw	r30, r16
     a5a:	01 90       	ld	r0, Z+
     a5c:	00 20       	and	r0, r0
     a5e:	e9 f7       	brne	.-6      	; 0xa5a <oled_print+0x24>
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	e0 1b       	sub	r30, r16
     a64:	f1 0b       	sbc	r31, r17
     a66:	ce 17       	cp	r28, r30
     a68:	df 07       	cpc	r29, r31
     a6a:	80 f3       	brcs	.-32     	; 0xa4c <oled_print+0x16>
		oled_put_char(str[i]);					// write to screen
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <oled_print_inv>:

void oled_print_inv(char* str)		// Print inverted text to screen
{
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	8c 01       	movw	r16, r24
     a88:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(str); i++)
     a8a:	c0 e0       	ldi	r28, 0x00	; 0
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	06 c0       	rjmp	.+12     	; 0xa9c <oled_print_inv+0x22>
		oled_put_char_inv(str[i]);					// write to screen
     a90:	f7 01       	movw	r30, r14
     a92:	81 91       	ld	r24, Z+
     a94:	7f 01       	movw	r14, r30
     a96:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <oled_put_char_inv>
		oled_put_char(str[i]);					// write to screen
}

void oled_print_inv(char* str)		// Print inverted text to screen
{
	for (int i = 0; i < strlen(str); i++)
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	f8 01       	movw	r30, r16
     a9e:	01 90       	ld	r0, Z+
     aa0:	00 20       	and	r0, r0
     aa2:	e9 f7       	brne	.-6      	; 0xa9e <oled_print_inv+0x24>
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	e0 1b       	sub	r30, r16
     aa8:	f1 0b       	sbc	r31, r17
     aaa:	ce 17       	cp	r28, r30
     aac:	df 07       	cpc	r29, r31
     aae:	80 f3       	brcs	.-32     	; 0xa90 <oled_print_inv+0x16>
		oled_put_char_inv(str[i]);					// write to screen
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	08 95       	ret

00000abe <spi_init>:
#include "../inc/spi.h"


void spi_init()                             /* Enable SPI */
{
    DDRB   |= (1<<PB4)  | (1<<PB5) | (1<<PB7);  // Set SS, MOSI and SCK output, all others input */
     abe:	87 b3       	in	r24, 0x17	; 23
     ac0:	80 6b       	ori	r24, 0xB0	; 176
     ac2:	87 bb       	out	0x17, r24	; 23
    SPCR    = (1 <<SPE) | (1<<MSTR)|( 1<<SPR0); // Enable SPI, Master, set clock rate fck/16 */
     ac4:	81 e5       	ldi	r24, 0x51	; 81
     ac6:	8d b9       	out	0x0d, r24	; 13
    // Have this in mcp2515 instead??
    PORTB  |= (1 << PB4);                       // Set Slave Select to HIGH
     ac8:	c4 9a       	sbi	0x18, 4	; 24
     aca:	08 95       	ret

00000acc <spi_write>:
    return SPDR;                            // Return data register
}

void spi_write(uint8_t cmd)                      /* Write to the SPI */
{
    SPDR = cmd;                            // Start transmission                        
     acc:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1<<SPIF)) )            // Wait for transmission complete  
     ace:	77 9b       	sbis	0x0e, 7	; 14
     ad0:	fe cf       	rjmp	.-4      	; 0xace <spi_write+0x2>
        ;
     ad2:	08 95       	ret

00000ad4 <spi_read>:
    PORTB  |= (1 << PB4);                       // Set Slave Select to HIGH
}

char spi_read()                              /* Read from the SPI */
{   
    spi_write(0x00);                        // Delay one clk
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	0e 94 66 05 	call	0xacc	; 0xacc <spi_write>
    while(!(SPSR & (1<<SPIF)))              // Wait for reception complete 
     ada:	77 9b       	sbis	0x0e, 7	; 14
     adc:	fe cf       	rjmp	.-4      	; 0xada <spi_read+0x6>
        ;

    return SPDR;                            // Return data register
     ade:	8f b1       	in	r24, 0x0f	; 15
}
     ae0:	08 95       	ret

00000ae2 <uart_receive>:
}

// Return received data
unsigned char uart_receive()
{
    return UDR0;
     ae2:	8c b1       	in	r24, 0x0c	; 12
}
     ae4:	08 95       	ret

00000ae6 <uart_is_ready>:
   \____________________________*/

// Check if transmitt buffer is ready
bool uart_is_ready()
{
    return ((UCSR0A & (1 << UDRE0)));
     ae6:	8b b1       	in	r24, 0x0b	; 11
}
     ae8:	85 fb       	bst	r24, 5
     aea:	88 27       	eor	r24, r24
     aec:	80 f9       	bld	r24, 0
     aee:	08 95       	ret

00000af0 <uart_send>:

// Send data
void uart_send(unsigned char data)
{
     af0:	cf 93       	push	r28
     af2:	c8 2f       	mov	r28, r24
    // Wait for empty transmit buffer
    while (!uart_is_ready());
     af4:	0e 94 73 05 	call	0xae6	; 0xae6 <uart_is_ready>
     af8:	88 23       	and	r24, r24
     afa:	e1 f3       	breq	.-8      	; 0xaf4 <uart_send+0x4>

    UDR0 = data; //put data on buffer
     afc:	cc b9       	out	0x0c, r28	; 12
}
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <uart_init>:

// initialize the uart
void uart_init()
{
    // Set baud rate
    UBRR0H = (unsigned char)(MYUBRR >> 8);
     b02:	10 bc       	out	0x20, r1	; 32
    UBRR0L = (unsigned char)(MYUBRR);
     b04:	8f e1       	ldi	r24, 0x1F	; 31
     b06:	89 b9       	out	0x09, r24	; 9

    // Enable receive and transmitt
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     b08:	88 e1       	ldi	r24, 0x18	; 24
     b0a:	8a b9       	out	0x0a, r24	; 10

    // Set frame format
    UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     b0c:	8e e8       	ldi	r24, 0x8E	; 142
     b0e:	80 bd       	out	0x20, r24	; 32

    // Assign printf to UART
    fdevopen(uart_send, uart_receive);
     b10:	61 e7       	ldi	r22, 0x71	; 113
     b12:	75 e0       	ldi	r23, 0x05	; 5
     b14:	88 e7       	ldi	r24, 0x78	; 120
     b16:	95 e0       	ldi	r25, 0x05	; 5
     b18:	0e 94 98 05 	call	0xb30	; 0xb30 <fdevopen>

    printf("<UART is ready>\n");
     b1c:	84 e2       	ldi	r24, 0x24	; 36
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 00 06 	call	0xc00	; 0xc00 <puts>
     b24:	08 95       	ret

00000b26 <xmem_init>:
#include "../inc/xmem.h"

void xmem_init()                      // Initialize external memory
{
	MCUCR =  (1 << SRE);	     	  // Activate external memory
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	85 bf       	out	0x35, r24	; 53
	SFIOR =  (1 << XMM2);			  // Mask JTAG pins
     b2a:	80 e2       	ldi	r24, 0x20	; 32
     b2c:	80 bf       	out	0x30, r24	; 48
     b2e:	08 95       	ret

00000b30 <fdevopen>:
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	31 f4       	brne	.+12     	; 0xb48 <fdevopen+0x18>
     b3c:	61 15       	cp	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	19 f4       	brne	.+6      	; 0xb48 <fdevopen+0x18>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	3a c0       	rjmp	.+116    	; 0xbbc <fdevopen+0x8c>
     b48:	8b 01       	movw	r16, r22
     b4a:	ec 01       	movw	r28, r24
     b4c:	6e e0       	ldi	r22, 0x0E	; 14
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 11 08 	call	0x1022	; 0x1022 <calloc>
     b58:	fc 01       	movw	r30, r24
     b5a:	89 2b       	or	r24, r25
     b5c:	91 f3       	breq	.-28     	; 0xb42 <fdevopen+0x12>
     b5e:	80 e8       	ldi	r24, 0x80	; 128
     b60:	83 83       	std	Z+3, r24	; 0x03
     b62:	01 15       	cp	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	71 f0       	breq	.+28     	; 0xb84 <fdevopen+0x54>
     b68:	13 87       	std	Z+11, r17	; 0x0b
     b6a:	02 87       	std	Z+10, r16	; 0x0a
     b6c:	81 e8       	ldi	r24, 0x81	; 129
     b6e:	83 83       	std	Z+3, r24	; 0x03
     b70:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <__data_end>
     b74:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <__data_end+0x1>
     b78:	89 2b       	or	r24, r25
     b7a:	21 f4       	brne	.+8      	; 0xb84 <fdevopen+0x54>
     b7c:	f0 93 35 03 	sts	0x0335, r31	; 0x800335 <__data_end+0x1>
     b80:	e0 93 34 03 	sts	0x0334, r30	; 0x800334 <__data_end>
     b84:	20 97       	sbiw	r28, 0x00	; 0
     b86:	c9 f0       	breq	.+50     	; 0xbba <fdevopen+0x8a>
     b88:	d1 87       	std	Z+9, r29	; 0x09
     b8a:	c0 87       	std	Z+8, r28	; 0x08
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	83 83       	std	Z+3, r24	; 0x03
     b92:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <__data_end+0x2>
     b96:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <__data_end+0x3>
     b9a:	89 2b       	or	r24, r25
     b9c:	71 f4       	brne	.+28     	; 0xbba <fdevopen+0x8a>
     b9e:	f0 93 37 03 	sts	0x0337, r31	; 0x800337 <__data_end+0x3>
     ba2:	e0 93 36 03 	sts	0x0336, r30	; 0x800336 <__data_end+0x2>
     ba6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <__data_end+0x4>
     baa:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <__data_end+0x5>
     bae:	89 2b       	or	r24, r25
     bb0:	21 f4       	brne	.+8      	; 0xbba <fdevopen+0x8a>
     bb2:	f0 93 39 03 	sts	0x0339, r31	; 0x800339 <__data_end+0x5>
     bb6:	e0 93 38 03 	sts	0x0338, r30	; 0x800338 <__data_end+0x4>
     bba:	cf 01       	movw	r24, r30
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <printf>:
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 ee       	ldi	r30, 0xE9	; 233
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__prologue_saves__+0x20>
     bd2:	ae 01       	movw	r20, r28
     bd4:	4b 5f       	subi	r20, 0xFB	; 251
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	fa 01       	movw	r30, r20
     bda:	61 91       	ld	r22, Z+
     bdc:	71 91       	ld	r23, Z+
     bde:	af 01       	movw	r20, r30
     be0:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <__data_end+0x2>
     be4:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <__data_end+0x3>
     be8:	0e 94 30 06 	call	0xc60	; 0xc60 <vfprintf>
     bec:	e2 e0       	ldi	r30, 0x02	; 2
     bee:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__epilogue_restores__+0x20>

00000bf2 <putchar>:
     bf2:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <__data_end+0x2>
     bf6:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <__data_end+0x3>
     bfa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     bfe:	08 95       	ret

00000c00 <puts>:
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <__data_end+0x2>
     c0c:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <__data_end+0x3>
     c10:	23 81       	ldd	r18, Z+3	; 0x03
     c12:	21 ff       	sbrs	r18, 1
     c14:	1b c0       	rjmp	.+54     	; 0xc4c <puts+0x4c>
     c16:	8c 01       	movw	r16, r24
     c18:	d0 e0       	ldi	r29, 0x00	; 0
     c1a:	c0 e0       	ldi	r28, 0x00	; 0
     c1c:	f8 01       	movw	r30, r16
     c1e:	81 91       	ld	r24, Z+
     c20:	8f 01       	movw	r16, r30
     c22:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <__data_end+0x2>
     c26:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <__data_end+0x3>
     c2a:	db 01       	movw	r26, r22
     c2c:	18 96       	adiw	r26, 0x08	; 8
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	19 97       	sbiw	r26, 0x09	; 9
     c34:	88 23       	and	r24, r24
     c36:	31 f0       	breq	.+12     	; 0xc44 <puts+0x44>
     c38:	09 95       	icall
     c3a:	89 2b       	or	r24, r25
     c3c:	79 f3       	breq	.-34     	; 0xc1c <puts+0x1c>
     c3e:	df ef       	ldi	r29, 0xFF	; 255
     c40:	cf ef       	ldi	r28, 0xFF	; 255
     c42:	ec cf       	rjmp	.-40     	; 0xc1c <puts+0x1c>
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	09 95       	icall
     c48:	89 2b       	or	r24, r25
     c4a:	19 f0       	breq	.+6      	; 0xc52 <puts+0x52>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	9f ef       	ldi	r25, 0xFF	; 255
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <puts+0x56>
     c52:	8d 2f       	mov	r24, r29
     c54:	9c 2f       	mov	r25, r28
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <vfprintf>:
     c60:	ab e0       	ldi	r26, 0x0B	; 11
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e6 e3       	ldi	r30, 0x36	; 54
     c66:	f6 e0       	ldi	r31, 0x06	; 6
     c68:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__prologue_saves__>
     c6c:	6c 01       	movw	r12, r24
     c6e:	7b 01       	movw	r14, r22
     c70:	8a 01       	movw	r16, r20
     c72:	fc 01       	movw	r30, r24
     c74:	17 82       	std	Z+7, r1	; 0x07
     c76:	16 82       	std	Z+6, r1	; 0x06
     c78:	83 81       	ldd	r24, Z+3	; 0x03
     c7a:	81 ff       	sbrs	r24, 1
     c7c:	cc c1       	rjmp	.+920    	; 0x1016 <vfprintf+0x3b6>
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	3c 01       	movw	r6, r24
     c84:	f6 01       	movw	r30, r12
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	f7 01       	movw	r30, r14
     c8a:	93 fd       	sbrc	r25, 3
     c8c:	85 91       	lpm	r24, Z+
     c8e:	93 ff       	sbrs	r25, 3
     c90:	81 91       	ld	r24, Z+
     c92:	7f 01       	movw	r14, r30
     c94:	88 23       	and	r24, r24
     c96:	09 f4       	brne	.+2      	; 0xc9a <vfprintf+0x3a>
     c98:	ba c1       	rjmp	.+884    	; 0x100e <vfprintf+0x3ae>
     c9a:	85 32       	cpi	r24, 0x25	; 37
     c9c:	39 f4       	brne	.+14     	; 0xcac <vfprintf+0x4c>
     c9e:	93 fd       	sbrc	r25, 3
     ca0:	85 91       	lpm	r24, Z+
     ca2:	93 ff       	sbrs	r25, 3
     ca4:	81 91       	ld	r24, Z+
     ca6:	7f 01       	movw	r14, r30
     ca8:	85 32       	cpi	r24, 0x25	; 37
     caa:	29 f4       	brne	.+10     	; 0xcb6 <vfprintf+0x56>
     cac:	b6 01       	movw	r22, r12
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     cb4:	e7 cf       	rjmp	.-50     	; 0xc84 <vfprintf+0x24>
     cb6:	91 2c       	mov	r9, r1
     cb8:	21 2c       	mov	r2, r1
     cba:	31 2c       	mov	r3, r1
     cbc:	ff e1       	ldi	r31, 0x1F	; 31
     cbe:	f3 15       	cp	r31, r3
     cc0:	d8 f0       	brcs	.+54     	; 0xcf8 <vfprintf+0x98>
     cc2:	8b 32       	cpi	r24, 0x2B	; 43
     cc4:	79 f0       	breq	.+30     	; 0xce4 <vfprintf+0x84>
     cc6:	38 f4       	brcc	.+14     	; 0xcd6 <vfprintf+0x76>
     cc8:	80 32       	cpi	r24, 0x20	; 32
     cca:	79 f0       	breq	.+30     	; 0xcea <vfprintf+0x8a>
     ccc:	83 32       	cpi	r24, 0x23	; 35
     cce:	a1 f4       	brne	.+40     	; 0xcf8 <vfprintf+0x98>
     cd0:	23 2d       	mov	r18, r3
     cd2:	20 61       	ori	r18, 0x10	; 16
     cd4:	1d c0       	rjmp	.+58     	; 0xd10 <vfprintf+0xb0>
     cd6:	8d 32       	cpi	r24, 0x2D	; 45
     cd8:	61 f0       	breq	.+24     	; 0xcf2 <vfprintf+0x92>
     cda:	80 33       	cpi	r24, 0x30	; 48
     cdc:	69 f4       	brne	.+26     	; 0xcf8 <vfprintf+0x98>
     cde:	23 2d       	mov	r18, r3
     ce0:	21 60       	ori	r18, 0x01	; 1
     ce2:	16 c0       	rjmp	.+44     	; 0xd10 <vfprintf+0xb0>
     ce4:	83 2d       	mov	r24, r3
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	38 2e       	mov	r3, r24
     cea:	e3 2d       	mov	r30, r3
     cec:	e4 60       	ori	r30, 0x04	; 4
     cee:	3e 2e       	mov	r3, r30
     cf0:	2a c0       	rjmp	.+84     	; 0xd46 <vfprintf+0xe6>
     cf2:	f3 2d       	mov	r31, r3
     cf4:	f8 60       	ori	r31, 0x08	; 8
     cf6:	1d c0       	rjmp	.+58     	; 0xd32 <vfprintf+0xd2>
     cf8:	37 fc       	sbrc	r3, 7
     cfa:	2d c0       	rjmp	.+90     	; 0xd56 <vfprintf+0xf6>
     cfc:	20 ed       	ldi	r18, 0xD0	; 208
     cfe:	28 0f       	add	r18, r24
     d00:	2a 30       	cpi	r18, 0x0A	; 10
     d02:	40 f0       	brcs	.+16     	; 0xd14 <vfprintf+0xb4>
     d04:	8e 32       	cpi	r24, 0x2E	; 46
     d06:	b9 f4       	brne	.+46     	; 0xd36 <vfprintf+0xd6>
     d08:	36 fc       	sbrc	r3, 6
     d0a:	81 c1       	rjmp	.+770    	; 0x100e <vfprintf+0x3ae>
     d0c:	23 2d       	mov	r18, r3
     d0e:	20 64       	ori	r18, 0x40	; 64
     d10:	32 2e       	mov	r3, r18
     d12:	19 c0       	rjmp	.+50     	; 0xd46 <vfprintf+0xe6>
     d14:	36 fe       	sbrs	r3, 6
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0xc4>
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	98 9e       	mul	r9, r24
     d1c:	20 0d       	add	r18, r0
     d1e:	11 24       	eor	r1, r1
     d20:	92 2e       	mov	r9, r18
     d22:	11 c0       	rjmp	.+34     	; 0xd46 <vfprintf+0xe6>
     d24:	ea e0       	ldi	r30, 0x0A	; 10
     d26:	2e 9e       	mul	r2, r30
     d28:	20 0d       	add	r18, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	22 2e       	mov	r2, r18
     d2e:	f3 2d       	mov	r31, r3
     d30:	f0 62       	ori	r31, 0x20	; 32
     d32:	3f 2e       	mov	r3, r31
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <vfprintf+0xe6>
     d36:	8c 36       	cpi	r24, 0x6C	; 108
     d38:	21 f4       	brne	.+8      	; 0xd42 <vfprintf+0xe2>
     d3a:	83 2d       	mov	r24, r3
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	38 2e       	mov	r3, r24
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <vfprintf+0xe6>
     d42:	88 36       	cpi	r24, 0x68	; 104
     d44:	41 f4       	brne	.+16     	; 0xd56 <vfprintf+0xf6>
     d46:	f7 01       	movw	r30, r14
     d48:	93 fd       	sbrc	r25, 3
     d4a:	85 91       	lpm	r24, Z+
     d4c:	93 ff       	sbrs	r25, 3
     d4e:	81 91       	ld	r24, Z+
     d50:	7f 01       	movw	r14, r30
     d52:	81 11       	cpse	r24, r1
     d54:	b3 cf       	rjmp	.-154    	; 0xcbc <vfprintf+0x5c>
     d56:	98 2f       	mov	r25, r24
     d58:	9f 7d       	andi	r25, 0xDF	; 223
     d5a:	95 54       	subi	r25, 0x45	; 69
     d5c:	93 30       	cpi	r25, 0x03	; 3
     d5e:	28 f4       	brcc	.+10     	; 0xd6a <vfprintf+0x10a>
     d60:	0c 5f       	subi	r16, 0xFC	; 252
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	9f e3       	ldi	r25, 0x3F	; 63
     d66:	99 83       	std	Y+1, r25	; 0x01
     d68:	0d c0       	rjmp	.+26     	; 0xd84 <vfprintf+0x124>
     d6a:	83 36       	cpi	r24, 0x63	; 99
     d6c:	31 f0       	breq	.+12     	; 0xd7a <vfprintf+0x11a>
     d6e:	83 37       	cpi	r24, 0x73	; 115
     d70:	71 f0       	breq	.+28     	; 0xd8e <vfprintf+0x12e>
     d72:	83 35       	cpi	r24, 0x53	; 83
     d74:	09 f0       	breq	.+2      	; 0xd78 <vfprintf+0x118>
     d76:	59 c0       	rjmp	.+178    	; 0xe2a <vfprintf+0x1ca>
     d78:	21 c0       	rjmp	.+66     	; 0xdbc <vfprintf+0x15c>
     d7a:	f8 01       	movw	r30, r16
     d7c:	80 81       	ld	r24, Z
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	0e 5f       	subi	r16, 0xFE	; 254
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	88 24       	eor	r8, r8
     d86:	83 94       	inc	r8
     d88:	91 2c       	mov	r9, r1
     d8a:	53 01       	movw	r10, r6
     d8c:	13 c0       	rjmp	.+38     	; 0xdb4 <vfprintf+0x154>
     d8e:	28 01       	movw	r4, r16
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	4f 0e       	add	r4, r31
     d94:	51 1c       	adc	r5, r1
     d96:	f8 01       	movw	r30, r16
     d98:	a0 80       	ld	r10, Z
     d9a:	b1 80       	ldd	r11, Z+1	; 0x01
     d9c:	36 fe       	sbrs	r3, 6
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <vfprintf+0x146>
     da0:	69 2d       	mov	r22, r9
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x14a>
     da6:	6f ef       	ldi	r22, 0xFF	; 255
     da8:	7f ef       	ldi	r23, 0xFF	; 255
     daa:	c5 01       	movw	r24, r10
     dac:	0e 94 60 09 	call	0x12c0	; 0x12c0 <strnlen>
     db0:	4c 01       	movw	r8, r24
     db2:	82 01       	movw	r16, r4
     db4:	f3 2d       	mov	r31, r3
     db6:	ff 77       	andi	r31, 0x7F	; 127
     db8:	3f 2e       	mov	r3, r31
     dba:	16 c0       	rjmp	.+44     	; 0xde8 <vfprintf+0x188>
     dbc:	28 01       	movw	r4, r16
     dbe:	22 e0       	ldi	r18, 0x02	; 2
     dc0:	42 0e       	add	r4, r18
     dc2:	51 1c       	adc	r5, r1
     dc4:	f8 01       	movw	r30, r16
     dc6:	a0 80       	ld	r10, Z
     dc8:	b1 80       	ldd	r11, Z+1	; 0x01
     dca:	36 fe       	sbrs	r3, 6
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <vfprintf+0x174>
     dce:	69 2d       	mov	r22, r9
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <vfprintf+0x178>
     dd4:	6f ef       	ldi	r22, 0xFF	; 255
     dd6:	7f ef       	ldi	r23, 0xFF	; 255
     dd8:	c5 01       	movw	r24, r10
     dda:	0e 94 4e 09 	call	0x129c	; 0x129c <strnlen_P>
     dde:	4c 01       	movw	r8, r24
     de0:	f3 2d       	mov	r31, r3
     de2:	f0 68       	ori	r31, 0x80	; 128
     de4:	3f 2e       	mov	r3, r31
     de6:	82 01       	movw	r16, r4
     de8:	33 fc       	sbrc	r3, 3
     dea:	1b c0       	rjmp	.+54     	; 0xe22 <vfprintf+0x1c2>
     dec:	82 2d       	mov	r24, r2
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	88 16       	cp	r8, r24
     df2:	99 06       	cpc	r9, r25
     df4:	b0 f4       	brcc	.+44     	; 0xe22 <vfprintf+0x1c2>
     df6:	b6 01       	movw	r22, r12
     df8:	80 e2       	ldi	r24, 0x20	; 32
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     e00:	2a 94       	dec	r2
     e02:	f4 cf       	rjmp	.-24     	; 0xdec <vfprintf+0x18c>
     e04:	f5 01       	movw	r30, r10
     e06:	37 fc       	sbrc	r3, 7
     e08:	85 91       	lpm	r24, Z+
     e0a:	37 fe       	sbrs	r3, 7
     e0c:	81 91       	ld	r24, Z+
     e0e:	5f 01       	movw	r10, r30
     e10:	b6 01       	movw	r22, r12
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     e18:	21 10       	cpse	r2, r1
     e1a:	2a 94       	dec	r2
     e1c:	21 e0       	ldi	r18, 0x01	; 1
     e1e:	82 1a       	sub	r8, r18
     e20:	91 08       	sbc	r9, r1
     e22:	81 14       	cp	r8, r1
     e24:	91 04       	cpc	r9, r1
     e26:	71 f7       	brne	.-36     	; 0xe04 <vfprintf+0x1a4>
     e28:	e8 c0       	rjmp	.+464    	; 0xffa <vfprintf+0x39a>
     e2a:	84 36       	cpi	r24, 0x64	; 100
     e2c:	11 f0       	breq	.+4      	; 0xe32 <vfprintf+0x1d2>
     e2e:	89 36       	cpi	r24, 0x69	; 105
     e30:	41 f5       	brne	.+80     	; 0xe82 <vfprintf+0x222>
     e32:	f8 01       	movw	r30, r16
     e34:	37 fe       	sbrs	r3, 7
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <vfprintf+0x1e6>
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	0c 5f       	subi	r16, 0xFC	; 252
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <vfprintf+0x1f6>
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	07 2e       	mov	r0, r23
     e4c:	00 0c       	add	r0, r0
     e4e:	88 0b       	sbc	r24, r24
     e50:	99 0b       	sbc	r25, r25
     e52:	0e 5f       	subi	r16, 0xFE	; 254
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	f3 2d       	mov	r31, r3
     e58:	ff 76       	andi	r31, 0x6F	; 111
     e5a:	3f 2e       	mov	r3, r31
     e5c:	97 ff       	sbrs	r25, 7
     e5e:	09 c0       	rjmp	.+18     	; 0xe72 <vfprintf+0x212>
     e60:	90 95       	com	r25
     e62:	80 95       	com	r24
     e64:	70 95       	com	r23
     e66:	61 95       	neg	r22
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	8f 4f       	sbci	r24, 0xFF	; 255
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	f0 68       	ori	r31, 0x80	; 128
     e70:	3f 2e       	mov	r3, r31
     e72:	2a e0       	ldi	r18, 0x0A	; 10
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	a3 01       	movw	r20, r6
     e78:	0e 94 a7 09 	call	0x134e	; 0x134e <__ultoa_invert>
     e7c:	88 2e       	mov	r8, r24
     e7e:	86 18       	sub	r8, r6
     e80:	45 c0       	rjmp	.+138    	; 0xf0c <vfprintf+0x2ac>
     e82:	85 37       	cpi	r24, 0x75	; 117
     e84:	31 f4       	brne	.+12     	; 0xe92 <vfprintf+0x232>
     e86:	23 2d       	mov	r18, r3
     e88:	2f 7e       	andi	r18, 0xEF	; 239
     e8a:	b2 2e       	mov	r11, r18
     e8c:	2a e0       	ldi	r18, 0x0A	; 10
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	25 c0       	rjmp	.+74     	; 0xedc <vfprintf+0x27c>
     e92:	93 2d       	mov	r25, r3
     e94:	99 7f       	andi	r25, 0xF9	; 249
     e96:	b9 2e       	mov	r11, r25
     e98:	8f 36       	cpi	r24, 0x6F	; 111
     e9a:	c1 f0       	breq	.+48     	; 0xecc <vfprintf+0x26c>
     e9c:	18 f4       	brcc	.+6      	; 0xea4 <vfprintf+0x244>
     e9e:	88 35       	cpi	r24, 0x58	; 88
     ea0:	79 f0       	breq	.+30     	; 0xec0 <vfprintf+0x260>
     ea2:	b5 c0       	rjmp	.+362    	; 0x100e <vfprintf+0x3ae>
     ea4:	80 37       	cpi	r24, 0x70	; 112
     ea6:	19 f0       	breq	.+6      	; 0xeae <vfprintf+0x24e>
     ea8:	88 37       	cpi	r24, 0x78	; 120
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <vfprintf+0x254>
     eac:	b0 c0       	rjmp	.+352    	; 0x100e <vfprintf+0x3ae>
     eae:	e9 2f       	mov	r30, r25
     eb0:	e0 61       	ori	r30, 0x10	; 16
     eb2:	be 2e       	mov	r11, r30
     eb4:	b4 fe       	sbrs	r11, 4
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <vfprintf+0x272>
     eb8:	fb 2d       	mov	r31, r11
     eba:	f4 60       	ori	r31, 0x04	; 4
     ebc:	bf 2e       	mov	r11, r31
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <vfprintf+0x272>
     ec0:	34 fe       	sbrs	r3, 4
     ec2:	0a c0       	rjmp	.+20     	; 0xed8 <vfprintf+0x278>
     ec4:	29 2f       	mov	r18, r25
     ec6:	26 60       	ori	r18, 0x06	; 6
     ec8:	b2 2e       	mov	r11, r18
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x278>
     ecc:	28 e0       	ldi	r18, 0x08	; 8
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <vfprintf+0x27c>
     ed2:	20 e1       	ldi	r18, 0x10	; 16
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x27c>
     ed8:	20 e1       	ldi	r18, 0x10	; 16
     eda:	32 e0       	ldi	r19, 0x02	; 2
     edc:	f8 01       	movw	r30, r16
     ede:	b7 fe       	sbrs	r11, 7
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <vfprintf+0x290>
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	0c 5f       	subi	r16, 0xFC	; 252
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	06 c0       	rjmp	.+12     	; 0xefc <vfprintf+0x29c>
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 5f       	subi	r16, 0xFE	; 254
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	a3 01       	movw	r20, r6
     efe:	0e 94 a7 09 	call	0x134e	; 0x134e <__ultoa_invert>
     f02:	88 2e       	mov	r8, r24
     f04:	86 18       	sub	r8, r6
     f06:	fb 2d       	mov	r31, r11
     f08:	ff 77       	andi	r31, 0x7F	; 127
     f0a:	3f 2e       	mov	r3, r31
     f0c:	36 fe       	sbrs	r3, 6
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <vfprintf+0x2ca>
     f10:	23 2d       	mov	r18, r3
     f12:	2e 7f       	andi	r18, 0xFE	; 254
     f14:	a2 2e       	mov	r10, r18
     f16:	89 14       	cp	r8, r9
     f18:	58 f4       	brcc	.+22     	; 0xf30 <vfprintf+0x2d0>
     f1a:	34 fe       	sbrs	r3, 4
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <vfprintf+0x2d4>
     f1e:	32 fc       	sbrc	r3, 2
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x2d4>
     f22:	83 2d       	mov	r24, r3
     f24:	8e 7e       	andi	r24, 0xEE	; 238
     f26:	a8 2e       	mov	r10, r24
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <vfprintf+0x2d4>
     f2a:	b8 2c       	mov	r11, r8
     f2c:	a3 2c       	mov	r10, r3
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x2d6>
     f30:	b8 2c       	mov	r11, r8
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <vfprintf+0x2d6>
     f34:	b9 2c       	mov	r11, r9
     f36:	a4 fe       	sbrs	r10, 4
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <vfprintf+0x2f8>
     f3a:	fe 01       	movw	r30, r28
     f3c:	e8 0d       	add	r30, r8
     f3e:	f1 1d       	adc	r31, r1
     f40:	80 81       	ld	r24, Z
     f42:	80 33       	cpi	r24, 0x30	; 48
     f44:	21 f4       	brne	.+8      	; 0xf4e <vfprintf+0x2ee>
     f46:	9a 2d       	mov	r25, r10
     f48:	99 7e       	andi	r25, 0xE9	; 233
     f4a:	a9 2e       	mov	r10, r25
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <vfprintf+0x300>
     f4e:	a2 fe       	sbrs	r10, 2
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x2fe>
     f52:	b3 94       	inc	r11
     f54:	b3 94       	inc	r11
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <vfprintf+0x300>
     f58:	8a 2d       	mov	r24, r10
     f5a:	86 78       	andi	r24, 0x86	; 134
     f5c:	09 f0       	breq	.+2      	; 0xf60 <vfprintf+0x300>
     f5e:	b3 94       	inc	r11
     f60:	a3 fc       	sbrc	r10, 3
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <vfprintf+0x326>
     f64:	a0 fe       	sbrs	r10, 0
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0x314>
     f68:	b2 14       	cp	r11, r2
     f6a:	88 f4       	brcc	.+34     	; 0xf8e <vfprintf+0x32e>
     f6c:	28 0c       	add	r2, r8
     f6e:	92 2c       	mov	r9, r2
     f70:	9b 18       	sub	r9, r11
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <vfprintf+0x330>
     f74:	b2 14       	cp	r11, r2
     f76:	60 f4       	brcc	.+24     	; 0xf90 <vfprintf+0x330>
     f78:	b6 01       	movw	r22, r12
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     f82:	b3 94       	inc	r11
     f84:	f7 cf       	rjmp	.-18     	; 0xf74 <vfprintf+0x314>
     f86:	b2 14       	cp	r11, r2
     f88:	18 f4       	brcc	.+6      	; 0xf90 <vfprintf+0x330>
     f8a:	2b 18       	sub	r2, r11
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <vfprintf+0x332>
     f8e:	98 2c       	mov	r9, r8
     f90:	21 2c       	mov	r2, r1
     f92:	a4 fe       	sbrs	r10, 4
     f94:	10 c0       	rjmp	.+32     	; 0xfb6 <vfprintf+0x356>
     f96:	b6 01       	movw	r22, r12
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     fa0:	a2 fe       	sbrs	r10, 2
     fa2:	17 c0       	rjmp	.+46     	; 0xfd2 <vfprintf+0x372>
     fa4:	a1 fc       	sbrc	r10, 1
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <vfprintf+0x34e>
     fa8:	88 e7       	ldi	r24, 0x78	; 120
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <vfprintf+0x352>
     fae:	88 e5       	ldi	r24, 0x58	; 88
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	b6 01       	movw	r22, r12
     fb4:	0c c0       	rjmp	.+24     	; 0xfce <vfprintf+0x36e>
     fb6:	8a 2d       	mov	r24, r10
     fb8:	86 78       	andi	r24, 0x86	; 134
     fba:	59 f0       	breq	.+22     	; 0xfd2 <vfprintf+0x372>
     fbc:	a1 fe       	sbrs	r10, 1
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <vfprintf+0x364>
     fc0:	8b e2       	ldi	r24, 0x2B	; 43
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <vfprintf+0x366>
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	a7 fc       	sbrc	r10, 7
     fc8:	8d e2       	ldi	r24, 0x2D	; 45
     fca:	b6 01       	movw	r22, r12
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     fd2:	89 14       	cp	r8, r9
     fd4:	38 f4       	brcc	.+14     	; 0xfe4 <vfprintf+0x384>
     fd6:	b6 01       	movw	r22, r12
     fd8:	80 e3       	ldi	r24, 0x30	; 48
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     fe0:	9a 94       	dec	r9
     fe2:	f7 cf       	rjmp	.-18     	; 0xfd2 <vfprintf+0x372>
     fe4:	8a 94       	dec	r8
     fe6:	f3 01       	movw	r30, r6
     fe8:	e8 0d       	add	r30, r8
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	b6 01       	movw	r22, r12
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
     ff6:	81 10       	cpse	r8, r1
     ff8:	f5 cf       	rjmp	.-22     	; 0xfe4 <vfprintf+0x384>
     ffa:	22 20       	and	r2, r2
     ffc:	09 f4       	brne	.+2      	; 0x1000 <vfprintf+0x3a0>
     ffe:	42 ce       	rjmp	.-892    	; 0xc84 <vfprintf+0x24>
    1000:	b6 01       	movw	r22, r12
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <fputc>
    100a:	2a 94       	dec	r2
    100c:	f6 cf       	rjmp	.-20     	; 0xffa <vfprintf+0x39a>
    100e:	f6 01       	movw	r30, r12
    1010:	86 81       	ldd	r24, Z+6	; 0x06
    1012:	97 81       	ldd	r25, Z+7	; 0x07
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x3ba>
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	2b 96       	adiw	r28, 0x0b	; 11
    101c:	e2 e1       	ldi	r30, 0x12	; 18
    101e:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__epilogue_restores__>

00001022 <calloc>:
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	86 9f       	mul	r24, r22
    102c:	80 01       	movw	r16, r0
    102e:	87 9f       	mul	r24, r23
    1030:	10 0d       	add	r17, r0
    1032:	96 9f       	mul	r25, r22
    1034:	10 0d       	add	r17, r0
    1036:	11 24       	eor	r1, r1
    1038:	c8 01       	movw	r24, r16
    103a:	0e 94 2d 08 	call	0x105a	; 0x105a <malloc>
    103e:	ec 01       	movw	r28, r24
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	29 f0       	breq	.+10     	; 0x104e <calloc+0x2c>
    1044:	a8 01       	movw	r20, r16
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <memset>
    104e:	ce 01       	movw	r24, r28
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <malloc>:
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	91 05       	cpc	r25, r1
    1066:	10 f4       	brcc	.+4      	; 0x106c <malloc+0x12>
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <__flp>
    1070:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <__flp+0x1>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	19 f1       	breq	.+70     	; 0x10c6 <malloc+0x6c>
    1080:	40 81       	ld	r20, Z
    1082:	51 81       	ldd	r21, Z+1	; 0x01
    1084:	02 81       	ldd	r16, Z+2	; 0x02
    1086:	13 81       	ldd	r17, Z+3	; 0x03
    1088:	48 17       	cp	r20, r24
    108a:	59 07       	cpc	r21, r25
    108c:	c8 f0       	brcs	.+50     	; 0x10c0 <malloc+0x66>
    108e:	84 17       	cp	r24, r20
    1090:	95 07       	cpc	r25, r21
    1092:	69 f4       	brne	.+26     	; 0x10ae <malloc+0x54>
    1094:	10 97       	sbiw	r26, 0x00	; 0
    1096:	31 f0       	breq	.+12     	; 0x10a4 <malloc+0x4a>
    1098:	12 96       	adiw	r26, 0x02	; 2
    109a:	0c 93       	st	X, r16
    109c:	12 97       	sbiw	r26, 0x02	; 2
    109e:	13 96       	adiw	r26, 0x03	; 3
    10a0:	1c 93       	st	X, r17
    10a2:	27 c0       	rjmp	.+78     	; 0x10f2 <malloc+0x98>
    10a4:	00 93 3c 03 	sts	0x033C, r16	; 0x80033c <__flp>
    10a8:	10 93 3d 03 	sts	0x033D, r17	; 0x80033d <__flp+0x1>
    10ac:	22 c0       	rjmp	.+68     	; 0x10f2 <malloc+0x98>
    10ae:	21 15       	cp	r18, r1
    10b0:	31 05       	cpc	r19, r1
    10b2:	19 f0       	breq	.+6      	; 0x10ba <malloc+0x60>
    10b4:	42 17       	cp	r20, r18
    10b6:	53 07       	cpc	r21, r19
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <malloc+0x66>
    10ba:	9a 01       	movw	r18, r20
    10bc:	bd 01       	movw	r22, r26
    10be:	ef 01       	movw	r28, r30
    10c0:	df 01       	movw	r26, r30
    10c2:	f8 01       	movw	r30, r16
    10c4:	db cf       	rjmp	.-74     	; 0x107c <malloc+0x22>
    10c6:	21 15       	cp	r18, r1
    10c8:	31 05       	cpc	r19, r1
    10ca:	f9 f0       	breq	.+62     	; 0x110a <malloc+0xb0>
    10cc:	28 1b       	sub	r18, r24
    10ce:	39 0b       	sbc	r19, r25
    10d0:	24 30       	cpi	r18, 0x04	; 4
    10d2:	31 05       	cpc	r19, r1
    10d4:	80 f4       	brcc	.+32     	; 0x10f6 <malloc+0x9c>
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	21 f0       	breq	.+8      	; 0x10e8 <malloc+0x8e>
    10e0:	fb 01       	movw	r30, r22
    10e2:	93 83       	std	Z+3, r25	; 0x03
    10e4:	82 83       	std	Z+2, r24	; 0x02
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <malloc+0x96>
    10e8:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <__flp+0x1>
    10ec:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <__flp>
    10f0:	fe 01       	movw	r30, r28
    10f2:	32 96       	adiw	r30, 0x02	; 2
    10f4:	44 c0       	rjmp	.+136    	; 0x117e <malloc+0x124>
    10f6:	fe 01       	movw	r30, r28
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	81 93       	st	Z+, r24
    10fe:	91 93       	st	Z+, r25
    1100:	22 50       	subi	r18, 0x02	; 2
    1102:	31 09       	sbc	r19, r1
    1104:	39 83       	std	Y+1, r19	; 0x01
    1106:	28 83       	st	Y, r18
    1108:	3a c0       	rjmp	.+116    	; 0x117e <malloc+0x124>
    110a:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__brkval>
    110e:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <__brkval+0x1>
    1112:	23 2b       	or	r18, r19
    1114:	41 f4       	brne	.+16     	; 0x1126 <malloc+0xcc>
    1116:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    111a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    111e:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <__brkval+0x1>
    1122:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <__brkval>
    1126:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    112a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	41 f4       	brne	.+16     	; 0x1144 <malloc+0xea>
    1134:	2d b7       	in	r18, 0x3d	; 61
    1136:	3e b7       	in	r19, 0x3e	; 62
    1138:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    113c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1140:	24 1b       	sub	r18, r20
    1142:	35 0b       	sbc	r19, r21
    1144:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <__brkval>
    1148:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <__brkval+0x1>
    114c:	e2 17       	cp	r30, r18
    114e:	f3 07       	cpc	r31, r19
    1150:	a0 f4       	brcc	.+40     	; 0x117a <malloc+0x120>
    1152:	2e 1b       	sub	r18, r30
    1154:	3f 0b       	sbc	r19, r31
    1156:	28 17       	cp	r18, r24
    1158:	39 07       	cpc	r19, r25
    115a:	78 f0       	brcs	.+30     	; 0x117a <malloc+0x120>
    115c:	ac 01       	movw	r20, r24
    115e:	4e 5f       	subi	r20, 0xFE	; 254
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	24 17       	cp	r18, r20
    1164:	35 07       	cpc	r19, r21
    1166:	48 f0       	brcs	.+18     	; 0x117a <malloc+0x120>
    1168:	4e 0f       	add	r20, r30
    116a:	5f 1f       	adc	r21, r31
    116c:	50 93 3b 03 	sts	0x033B, r21	; 0x80033b <__brkval+0x1>
    1170:	40 93 3a 03 	sts	0x033A, r20	; 0x80033a <__brkval>
    1174:	81 93       	st	Z+, r24
    1176:	91 93       	st	Z+, r25
    1178:	02 c0       	rjmp	.+4      	; 0x117e <malloc+0x124>
    117a:	e0 e0       	ldi	r30, 0x00	; 0
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	cf 01       	movw	r24, r30
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <free>:
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	09 f4       	brne	.+2      	; 0x1194 <free+0xa>
    1192:	81 c0       	rjmp	.+258    	; 0x1296 <free+0x10c>
    1194:	fc 01       	movw	r30, r24
    1196:	32 97       	sbiw	r30, 0x02	; 2
    1198:	13 82       	std	Z+3, r1	; 0x03
    119a:	12 82       	std	Z+2, r1	; 0x02
    119c:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <__flp>
    11a0:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <__flp+0x1>
    11a4:	10 97       	sbiw	r26, 0x00	; 0
    11a6:	81 f4       	brne	.+32     	; 0x11c8 <free+0x3e>
    11a8:	20 81       	ld	r18, Z
    11aa:	31 81       	ldd	r19, Z+1	; 0x01
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__brkval>
    11b4:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <__brkval+0x1>
    11b8:	28 17       	cp	r18, r24
    11ba:	39 07       	cpc	r19, r25
    11bc:	51 f5       	brne	.+84     	; 0x1212 <free+0x88>
    11be:	f0 93 3b 03 	sts	0x033B, r31	; 0x80033b <__brkval+0x1>
    11c2:	e0 93 3a 03 	sts	0x033A, r30	; 0x80033a <__brkval>
    11c6:	67 c0       	rjmp	.+206    	; 0x1296 <free+0x10c>
    11c8:	ed 01       	movw	r28, r26
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	ce 17       	cp	r28, r30
    11d0:	df 07       	cpc	r29, r31
    11d2:	40 f4       	brcc	.+16     	; 0x11e4 <free+0x5a>
    11d4:	4a 81       	ldd	r20, Y+2	; 0x02
    11d6:	5b 81       	ldd	r21, Y+3	; 0x03
    11d8:	9e 01       	movw	r18, r28
    11da:	41 15       	cp	r20, r1
    11dc:	51 05       	cpc	r21, r1
    11de:	f1 f0       	breq	.+60     	; 0x121c <free+0x92>
    11e0:	ea 01       	movw	r28, r20
    11e2:	f5 cf       	rjmp	.-22     	; 0x11ce <free+0x44>
    11e4:	d3 83       	std	Z+3, r29	; 0x03
    11e6:	c2 83       	std	Z+2, r28	; 0x02
    11e8:	40 81       	ld	r20, Z
    11ea:	51 81       	ldd	r21, Z+1	; 0x01
    11ec:	84 0f       	add	r24, r20
    11ee:	95 1f       	adc	r25, r21
    11f0:	c8 17       	cp	r28, r24
    11f2:	d9 07       	cpc	r29, r25
    11f4:	59 f4       	brne	.+22     	; 0x120c <free+0x82>
    11f6:	88 81       	ld	r24, Y
    11f8:	99 81       	ldd	r25, Y+1	; 0x01
    11fa:	84 0f       	add	r24, r20
    11fc:	95 1f       	adc	r25, r21
    11fe:	02 96       	adiw	r24, 0x02	; 2
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	93 83       	std	Z+3, r25	; 0x03
    120a:	82 83       	std	Z+2, r24	; 0x02
    120c:	21 15       	cp	r18, r1
    120e:	31 05       	cpc	r19, r1
    1210:	29 f4       	brne	.+10     	; 0x121c <free+0x92>
    1212:	f0 93 3d 03 	sts	0x033D, r31	; 0x80033d <__flp+0x1>
    1216:	e0 93 3c 03 	sts	0x033C, r30	; 0x80033c <__flp>
    121a:	3d c0       	rjmp	.+122    	; 0x1296 <free+0x10c>
    121c:	e9 01       	movw	r28, r18
    121e:	fb 83       	std	Y+3, r31	; 0x03
    1220:	ea 83       	std	Y+2, r30	; 0x02
    1222:	49 91       	ld	r20, Y+
    1224:	59 91       	ld	r21, Y+
    1226:	c4 0f       	add	r28, r20
    1228:	d5 1f       	adc	r29, r21
    122a:	ec 17       	cp	r30, r28
    122c:	fd 07       	cpc	r31, r29
    122e:	61 f4       	brne	.+24     	; 0x1248 <free+0xbe>
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	84 0f       	add	r24, r20
    1236:	95 1f       	adc	r25, r21
    1238:	02 96       	adiw	r24, 0x02	; 2
    123a:	e9 01       	movw	r28, r18
    123c:	99 83       	std	Y+1, r25	; 0x01
    123e:	88 83       	st	Y, r24
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	9b 83       	std	Y+3, r25	; 0x03
    1246:	8a 83       	std	Y+2, r24	; 0x02
    1248:	e0 e0       	ldi	r30, 0x00	; 0
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	12 96       	adiw	r26, 0x02	; 2
    124e:	8d 91       	ld	r24, X+
    1250:	9c 91       	ld	r25, X
    1252:	13 97       	sbiw	r26, 0x03	; 3
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	19 f0       	breq	.+6      	; 0x125e <free+0xd4>
    1258:	fd 01       	movw	r30, r26
    125a:	dc 01       	movw	r26, r24
    125c:	f7 cf       	rjmp	.-18     	; 0x124c <free+0xc2>
    125e:	8d 91       	ld	r24, X+
    1260:	9c 91       	ld	r25, X
    1262:	11 97       	sbiw	r26, 0x01	; 1
    1264:	9d 01       	movw	r18, r26
    1266:	2e 5f       	subi	r18, 0xFE	; 254
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__brkval>
    1272:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <__brkval+0x1>
    1276:	28 17       	cp	r18, r24
    1278:	39 07       	cpc	r19, r25
    127a:	69 f4       	brne	.+26     	; 0x1296 <free+0x10c>
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	29 f4       	brne	.+10     	; 0x128a <free+0x100>
    1280:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <__flp+0x1>
    1284:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <__flp>
    1288:	02 c0       	rjmp	.+4      	; 0x128e <free+0x104>
    128a:	13 82       	std	Z+3, r1	; 0x03
    128c:	12 82       	std	Z+2, r1	; 0x02
    128e:	b0 93 3b 03 	sts	0x033B, r27	; 0x80033b <__brkval+0x1>
    1292:	a0 93 3a 03 	sts	0x033A, r26	; 0x80033a <__brkval>
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <strnlen_P>:
    129c:	fc 01       	movw	r30, r24
    129e:	05 90       	lpm	r0, Z+
    12a0:	61 50       	subi	r22, 0x01	; 1
    12a2:	70 40       	sbci	r23, 0x00	; 0
    12a4:	01 10       	cpse	r0, r1
    12a6:	d8 f7       	brcc	.-10     	; 0x129e <strnlen_P+0x2>
    12a8:	80 95       	com	r24
    12aa:	90 95       	com	r25
    12ac:	8e 0f       	add	r24, r30
    12ae:	9f 1f       	adc	r25, r31
    12b0:	08 95       	ret

000012b2 <memset>:
    12b2:	dc 01       	movw	r26, r24
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <memset+0x6>
    12b6:	6d 93       	st	X+, r22
    12b8:	41 50       	subi	r20, 0x01	; 1
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	e0 f7       	brcc	.-8      	; 0x12b6 <memset+0x4>
    12be:	08 95       	ret

000012c0 <strnlen>:
    12c0:	fc 01       	movw	r30, r24
    12c2:	61 50       	subi	r22, 0x01	; 1
    12c4:	70 40       	sbci	r23, 0x00	; 0
    12c6:	01 90       	ld	r0, Z+
    12c8:	01 10       	cpse	r0, r1
    12ca:	d8 f7       	brcc	.-10     	; 0x12c2 <strnlen+0x2>
    12cc:	80 95       	com	r24
    12ce:	90 95       	com	r25
    12d0:	8e 0f       	add	r24, r30
    12d2:	9f 1f       	adc	r25, r31
    12d4:	08 95       	ret

000012d6 <fputc>:
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	fb 01       	movw	r30, r22
    12e0:	23 81       	ldd	r18, Z+3	; 0x03
    12e2:	21 fd       	sbrc	r18, 1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <fputc+0x16>
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	9f ef       	ldi	r25, 0xFF	; 255
    12ea:	2c c0       	rjmp	.+88     	; 0x1344 <fputc+0x6e>
    12ec:	22 ff       	sbrs	r18, 2
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <fputc+0x46>
    12f0:	46 81       	ldd	r20, Z+6	; 0x06
    12f2:	57 81       	ldd	r21, Z+7	; 0x07
    12f4:	24 81       	ldd	r18, Z+4	; 0x04
    12f6:	35 81       	ldd	r19, Z+5	; 0x05
    12f8:	42 17       	cp	r20, r18
    12fa:	53 07       	cpc	r21, r19
    12fc:	44 f4       	brge	.+16     	; 0x130e <fputc+0x38>
    12fe:	a0 81       	ld	r26, Z
    1300:	b1 81       	ldd	r27, Z+1	; 0x01
    1302:	9d 01       	movw	r18, r26
    1304:	2f 5f       	subi	r18, 0xFF	; 255
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	31 83       	std	Z+1, r19	; 0x01
    130a:	20 83       	st	Z, r18
    130c:	8c 93       	st	X, r24
    130e:	26 81       	ldd	r18, Z+6	; 0x06
    1310:	37 81       	ldd	r19, Z+7	; 0x07
    1312:	2f 5f       	subi	r18, 0xFF	; 255
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	37 83       	std	Z+7, r19	; 0x07
    1318:	26 83       	std	Z+6, r18	; 0x06
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <fputc+0x6e>
    131c:	8b 01       	movw	r16, r22
    131e:	ec 01       	movw	r28, r24
    1320:	fb 01       	movw	r30, r22
    1322:	00 84       	ldd	r0, Z+8	; 0x08
    1324:	f1 85       	ldd	r31, Z+9	; 0x09
    1326:	e0 2d       	mov	r30, r0
    1328:	09 95       	icall
    132a:	89 2b       	or	r24, r25
    132c:	e1 f6       	brne	.-72     	; 0x12e6 <fputc+0x10>
    132e:	d8 01       	movw	r26, r16
    1330:	16 96       	adiw	r26, 0x06	; 6
    1332:	8d 91       	ld	r24, X+
    1334:	9c 91       	ld	r25, X
    1336:	17 97       	sbiw	r26, 0x07	; 7
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	17 96       	adiw	r26, 0x07	; 7
    133c:	9c 93       	st	X, r25
    133e:	8e 93       	st	-X, r24
    1340:	16 97       	sbiw	r26, 0x06	; 6
    1342:	ce 01       	movw	r24, r28
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <__ultoa_invert>:
    134e:	fa 01       	movw	r30, r20
    1350:	aa 27       	eor	r26, r26
    1352:	28 30       	cpi	r18, 0x08	; 8
    1354:	51 f1       	breq	.+84     	; 0x13aa <__ultoa_invert+0x5c>
    1356:	20 31       	cpi	r18, 0x10	; 16
    1358:	81 f1       	breq	.+96     	; 0x13ba <__ultoa_invert+0x6c>
    135a:	e8 94       	clt
    135c:	6f 93       	push	r22
    135e:	6e 7f       	andi	r22, 0xFE	; 254
    1360:	6e 5f       	subi	r22, 0xFE	; 254
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	8f 4f       	sbci	r24, 0xFF	; 255
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	af 4f       	sbci	r26, 0xFF	; 255
    136a:	b1 e0       	ldi	r27, 0x01	; 1
    136c:	3e d0       	rcall	.+124    	; 0x13ea <__ultoa_invert+0x9c>
    136e:	b4 e0       	ldi	r27, 0x04	; 4
    1370:	3c d0       	rcall	.+120    	; 0x13ea <__ultoa_invert+0x9c>
    1372:	67 0f       	add	r22, r23
    1374:	78 1f       	adc	r23, r24
    1376:	89 1f       	adc	r24, r25
    1378:	9a 1f       	adc	r25, r26
    137a:	a1 1d       	adc	r26, r1
    137c:	68 0f       	add	r22, r24
    137e:	79 1f       	adc	r23, r25
    1380:	8a 1f       	adc	r24, r26
    1382:	91 1d       	adc	r25, r1
    1384:	a1 1d       	adc	r26, r1
    1386:	6a 0f       	add	r22, r26
    1388:	71 1d       	adc	r23, r1
    138a:	81 1d       	adc	r24, r1
    138c:	91 1d       	adc	r25, r1
    138e:	a1 1d       	adc	r26, r1
    1390:	20 d0       	rcall	.+64     	; 0x13d2 <__ultoa_invert+0x84>
    1392:	09 f4       	brne	.+2      	; 0x1396 <__ultoa_invert+0x48>
    1394:	68 94       	set
    1396:	3f 91       	pop	r19
    1398:	2a e0       	ldi	r18, 0x0A	; 10
    139a:	26 9f       	mul	r18, r22
    139c:	11 24       	eor	r1, r1
    139e:	30 19       	sub	r19, r0
    13a0:	30 5d       	subi	r19, 0xD0	; 208
    13a2:	31 93       	st	Z+, r19
    13a4:	de f6       	brtc	.-74     	; 0x135c <__ultoa_invert+0xe>
    13a6:	cf 01       	movw	r24, r30
    13a8:	08 95       	ret
    13aa:	46 2f       	mov	r20, r22
    13ac:	47 70       	andi	r20, 0x07	; 7
    13ae:	40 5d       	subi	r20, 0xD0	; 208
    13b0:	41 93       	st	Z+, r20
    13b2:	b3 e0       	ldi	r27, 0x03	; 3
    13b4:	0f d0       	rcall	.+30     	; 0x13d4 <__ultoa_invert+0x86>
    13b6:	c9 f7       	brne	.-14     	; 0x13aa <__ultoa_invert+0x5c>
    13b8:	f6 cf       	rjmp	.-20     	; 0x13a6 <__ultoa_invert+0x58>
    13ba:	46 2f       	mov	r20, r22
    13bc:	4f 70       	andi	r20, 0x0F	; 15
    13be:	40 5d       	subi	r20, 0xD0	; 208
    13c0:	4a 33       	cpi	r20, 0x3A	; 58
    13c2:	18 f0       	brcs	.+6      	; 0x13ca <__ultoa_invert+0x7c>
    13c4:	49 5d       	subi	r20, 0xD9	; 217
    13c6:	31 fd       	sbrc	r19, 1
    13c8:	40 52       	subi	r20, 0x20	; 32
    13ca:	41 93       	st	Z+, r20
    13cc:	02 d0       	rcall	.+4      	; 0x13d2 <__ultoa_invert+0x84>
    13ce:	a9 f7       	brne	.-22     	; 0x13ba <__ultoa_invert+0x6c>
    13d0:	ea cf       	rjmp	.-44     	; 0x13a6 <__ultoa_invert+0x58>
    13d2:	b4 e0       	ldi	r27, 0x04	; 4
    13d4:	a6 95       	lsr	r26
    13d6:	97 95       	ror	r25
    13d8:	87 95       	ror	r24
    13da:	77 95       	ror	r23
    13dc:	67 95       	ror	r22
    13de:	ba 95       	dec	r27
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <__ultoa_invert+0x86>
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	61 05       	cpc	r22, r1
    13e6:	71 05       	cpc	r23, r1
    13e8:	08 95       	ret
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
    13ee:	0a 2e       	mov	r0, r26
    13f0:	06 94       	lsr	r0
    13f2:	57 95       	ror	r21
    13f4:	47 95       	ror	r20
    13f6:	37 95       	ror	r19
    13f8:	27 95       	ror	r18
    13fa:	ba 95       	dec	r27
    13fc:	c9 f7       	brne	.-14     	; 0x13f0 <__ultoa_invert+0xa2>
    13fe:	62 0f       	add	r22, r18
    1400:	73 1f       	adc	r23, r19
    1402:	84 1f       	adc	r24, r20
    1404:	95 1f       	adc	r25, r21
    1406:	a0 1d       	adc	r26, r0
    1408:	08 95       	ret

0000140a <__prologue_saves__>:
    140a:	2f 92       	push	r2
    140c:	3f 92       	push	r3
    140e:	4f 92       	push	r4
    1410:	5f 92       	push	r5
    1412:	6f 92       	push	r6
    1414:	7f 92       	push	r7
    1416:	8f 92       	push	r8
    1418:	9f 92       	push	r9
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	ca 1b       	sub	r28, r26
    1434:	db 0b       	sbc	r29, r27
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	09 94       	ijmp

00001442 <__epilogue_restores__>:
    1442:	2a 88       	ldd	r2, Y+18	; 0x12
    1444:	39 88       	ldd	r3, Y+17	; 0x11
    1446:	48 88       	ldd	r4, Y+16	; 0x10
    1448:	5f 84       	ldd	r5, Y+15	; 0x0f
    144a:	6e 84       	ldd	r6, Y+14	; 0x0e
    144c:	7d 84       	ldd	r7, Y+13	; 0x0d
    144e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1450:	9b 84       	ldd	r9, Y+11	; 0x0b
    1452:	aa 84       	ldd	r10, Y+10	; 0x0a
    1454:	b9 84       	ldd	r11, Y+9	; 0x09
    1456:	c8 84       	ldd	r12, Y+8	; 0x08
    1458:	df 80       	ldd	r13, Y+7	; 0x07
    145a:	ee 80       	ldd	r14, Y+6	; 0x06
    145c:	fd 80       	ldd	r15, Y+5	; 0x05
    145e:	0c 81       	ldd	r16, Y+4	; 0x04
    1460:	1b 81       	ldd	r17, Y+3	; 0x03
    1462:	aa 81       	ldd	r26, Y+2	; 0x02
    1464:	b9 81       	ldd	r27, Y+1	; 0x01
    1466:	ce 0f       	add	r28, r30
    1468:	d1 1d       	adc	r29, r1
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	ed 01       	movw	r28, r26
    1476:	08 95       	ret

00001478 <_exit>:
    1478:	f8 94       	cli

0000147a <__stop_program>:
    147a:	ff cf       	rjmp	.-2      	; 0x147a <__stop_program>
