
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00000cc2  00000d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001f0  008001f0  00000e46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bb  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f4  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  00002819  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ec       	ldi	r30, 0xC2	; 194
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 3f       	cpi	r26, 0xF0	; 240
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 ef       	ldi	r26, 0xF0	; 240
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 3f       	cpi	r26, 0xFA	; 250
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  a6:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SRAM_test>:
#include <stdio.h>                      // Standard library
#include <stdlib.h>
#include "uart.h"

void SRAM_test(void)
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 c0 01 	call	0x380	; 0x380 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  c6:	0e 94 4f 01 	call	0x29e	; 0x29e <rand>
  ca:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  d0:	c1 2c       	mov	r12, r1
  d2:	d1 2c       	mov	r13, r1

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,
  d8:	c0 e2       	ldi	r28, 0x20	; 32
  da:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
  dc:	0e 94 4f 01 	call	0x29e	; 0x29e <rand>
  e0:	f6 01       	movw	r30, r12
  e2:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
  e4:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
  e6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
  e8:	28 17       	cp	r18, r24
  ea:	a9 f0       	breq	.+42     	; 0x116 <SRAM_test+0x68>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,
  ec:	99 27       	eor	r25, r25
  ee:	9f 93       	push	r25
  f0:	8f 93       	push	r24
  f2:	1f 92       	push	r1
  f4:	2f 93       	push	r18
  f6:	df 92       	push	r13
  f8:	cf 92       	push	r12
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	0e 94 aa 01 	call	0x354	; 0x354 <printf>
			retreived_value, some_value);
			write_errors++;
 102:	0f 5f       	subi	r16, 0xFF	; 255
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	8d b7       	in	r24, 0x3d	; 61
 108:	9e b7       	in	r25, 0x3e	; 62
 10a:	08 96       	adiw	r24, 0x08	; 8
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	9e bf       	out	0x3e, r25	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	c9 1a       	sub	r12, r25
 11a:	d9 0a       	sbc	r13, r25
 11c:	c1 14       	cp	r12, r1
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	d8 06       	cpc	r13, r24
 122:	e1 f6       	brne	.-72     	; 0xdc <SRAM_test+0x2e>
			retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
 124:	c7 01       	movw	r24, r14
 126:	0e 94 54 01 	call	0x2a8	; 0x2a8 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",
 132:	0f 2e       	mov	r0, r31
 134:	f9 e5       	ldi	r31, 0x59	; 89
 136:	cf 2e       	mov	r12, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	df 2e       	mov	r13, r31
 13c:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 13e:	0e 94 4f 01 	call	0x29e	; 0x29e <rand>
 142:	fe 01       	movw	r30, r28
 144:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
 146:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 148:	28 17       	cp	r18, r24
 14a:	b1 f0       	breq	.+44     	; 0x178 <SRAM_test+0xca>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",
 14c:	99 27       	eor	r25, r25
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	1f 92       	push	r1
 154:	2f 93       	push	r18
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	df 92       	push	r13
 15c:	cf 92       	push	r12
 15e:	0e 94 aa 01 	call	0x354	; 0x354 <printf>
			i, retreived_value, some_value);
			retrieval_errors++;
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	e9 1a       	sub	r14, r25
 166:	f9 0a       	sbc	r15, r25
 168:	8d b7       	in	r24, 0x3d	; 61
 16a:	9e b7       	in	r25, 0x3e	; 62
 16c:	08 96       	adiw	r24, 0x08	; 8
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	9e bf       	out	0x3e, r25	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c1 15       	cp	r28, r1
 17c:	98 e0       	ldi	r25, 0x08	; 8
 17e:	d9 07       	cpc	r29, r25
 180:	f1 f6       	brne	.-68     	; 0x13e <SRAM_test+0x90>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",
			i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", 
 182:	ff 92       	push	r15
 184:	ef 92       	push	r14
 186:	1f 93       	push	r17
 188:	0f 93       	push	r16
 18a:	86 e9       	ldi	r24, 0x96	; 150
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	0e 94 aa 01 	call	0x354	; 0x354 <printf>
			write_errors, retrieval_errors);
}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	08 95       	ret

000001b4 <main>:

int main(void)
{
    // Setup pins
    DDRB  |= (1 << PB0);              // Port B0 is an output
 1b4:	b8 9a       	sbi	0x17, 0	; 23
    PORTB |= (1 << PB0);              // Port B0 is HIGH: Turn on LED
 1b6:	c0 9a       	sbi	0x18, 0	; 24
	MCUCR =  (1 << SRE);	     	  // Activate external memory
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	85 bf       	out	0x35, r24	; 53
	SFIOR =  (1 << XMM2);			  // Mask JTAG pins
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	80 bf       	out	0x30, r24	; 48
	//
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	// Run test
	uart_init();
 1c0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <uart_init>
	SRAM_test();
 1c4:	0e 94 57 00 	call	0xae	; 0xae <SRAM_test>
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x14>

000001ca <uart_receive>:
}

// Return received data
unsigned char uart_receive()
{
    return UDR0;
 1ca:	8c b1       	in	r24, 0x0c	; 12
}
 1cc:	08 95       	ret

000001ce <uart_is_ready>:
   \____________________________*/

// Check if transmitt buffer is ready
bool uart_is_ready()
{
    return ((UCSR0A & (1 << UDRE0)));
 1ce:	8b b1       	in	r24, 0x0b	; 11
}
 1d0:	85 fb       	bst	r24, 5
 1d2:	88 27       	eor	r24, r24
 1d4:	80 f9       	bld	r24, 0
 1d6:	08 95       	ret

000001d8 <uart_send>:

// Send data
void uart_send(unsigned char data)
{
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
    // Wait for empty transmit buffer
    while (!uart_is_ready());
 1dc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_is_ready>
 1e0:	88 23       	and	r24, r24
 1e2:	e1 f3       	breq	.-8      	; 0x1dc <uart_send+0x4>

    UDR0 = data; //put data on buffer
 1e4:	cc b9       	out	0x0c, r28	; 12
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <uart_init>:

// initialize the uart
void uart_init()
{
    // Set baud rate
    UBRR0H = (unsigned char)(MYUBRR >> 8);
 1ea:	10 bc       	out	0x20, r1	; 32
    UBRR0L = (unsigned char)(MYUBRR);
 1ec:	8f e1       	ldi	r24, 0x1F	; 31
 1ee:	89 b9       	out	0x09, r24	; 9

    // Enable receive and transmitt
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	8a b9       	out	0x0a, r24	; 10

    // Set frame format
    UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 1f4:	8e e8       	ldi	r24, 0x8E	; 142
 1f6:	80 bd       	out	0x20, r24	; 32

    // Assign printf to UART
    fdevopen(uart_send, uart_receive);
 1f8:	65 ee       	ldi	r22, 0xE5	; 229
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	8c ee       	ldi	r24, 0xEC	; 236
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 5f 01 	call	0x2be	; 0x2be <fdevopen>
 204:	08 95       	ret

00000206 <do_rand>:
 206:	8f 92       	push	r8
 208:	9f 92       	push	r9
 20a:	af 92       	push	r10
 20c:	bf 92       	push	r11
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	68 81       	ld	r22, Y
 21e:	79 81       	ldd	r23, Y+1	; 0x01
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	9b 81       	ldd	r25, Y+3	; 0x03
 224:	61 15       	cp	r22, r1
 226:	71 05       	cpc	r23, r1
 228:	81 05       	cpc	r24, r1
 22a:	91 05       	cpc	r25, r1
 22c:	21 f4       	brne	.+8      	; 0x236 <do_rand+0x30>
 22e:	64 e2       	ldi	r22, 0x24	; 36
 230:	79 ed       	ldi	r23, 0xD9	; 217
 232:	8b e5       	ldi	r24, 0x5B	; 91
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	2d e1       	ldi	r18, 0x1D	; 29
 238:	33 ef       	ldi	r19, 0xF3	; 243
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__divmodsi4>
 242:	49 01       	movw	r8, r18
 244:	5a 01       	movw	r10, r20
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	a7 ea       	ldi	r26, 0xA7	; 167
 24c:	b1 e4       	ldi	r27, 0x41	; 65
 24e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__muluhisi3>
 252:	6b 01       	movw	r12, r22
 254:	7c 01       	movw	r14, r24
 256:	ac ee       	ldi	r26, 0xEC	; 236
 258:	b4 ef       	ldi	r27, 0xF4	; 244
 25a:	a5 01       	movw	r20, r10
 25c:	94 01       	movw	r18, r8
 25e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__mulohisi3>
 262:	dc 01       	movw	r26, r24
 264:	cb 01       	movw	r24, r22
 266:	8c 0d       	add	r24, r12
 268:	9d 1d       	adc	r25, r13
 26a:	ae 1d       	adc	r26, r14
 26c:	bf 1d       	adc	r27, r15
 26e:	b7 ff       	sbrs	r27, 7
 270:	03 c0       	rjmp	.+6      	; 0x278 <do_rand+0x72>
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	a1 09       	sbc	r26, r1
 276:	b0 48       	sbci	r27, 0x80	; 128
 278:	88 83       	st	Y, r24
 27a:	99 83       	std	Y+1, r25	; 0x01
 27c:	aa 83       	std	Y+2, r26	; 0x02
 27e:	bb 83       	std	Y+3, r27	; 0x03
 280:	9f 77       	andi	r25, 0x7F	; 127
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	af 90       	pop	r10
 292:	9f 90       	pop	r9
 294:	8f 90       	pop	r8
 296:	08 95       	ret

00000298 <rand_r>:
 298:	0e 94 03 01 	call	0x206	; 0x206 <do_rand>
 29c:	08 95       	ret

0000029e <rand>:
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 03 01 	call	0x206	; 0x206 <do_rand>
 2a6:	08 95       	ret

000002a8 <srand>:
 2a8:	a0 e0       	ldi	r26, 0x00	; 0
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2b4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2b8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2bc:	08 95       	ret

000002be <fdevopen>:
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	31 f4       	brne	.+12     	; 0x2d6 <fdevopen+0x18>
 2ca:	61 15       	cp	r22, r1
 2cc:	71 05       	cpc	r23, r1
 2ce:	19 f4       	brne	.+6      	; 0x2d6 <fdevopen+0x18>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	3a c0       	rjmp	.+116    	; 0x34a <fdevopen+0x8c>
 2d6:	8b 01       	movw	r16, r22
 2d8:	ec 01       	movw	r28, r24
 2da:	6e e0       	ldi	r22, 0x0E	; 14
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <calloc>
 2e6:	fc 01       	movw	r30, r24
 2e8:	89 2b       	or	r24, r25
 2ea:	91 f3       	breq	.-28     	; 0x2d0 <fdevopen+0x12>
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	83 83       	std	Z+3, r24	; 0x03
 2f0:	01 15       	cp	r16, r1
 2f2:	11 05       	cpc	r17, r1
 2f4:	71 f0       	breq	.+28     	; 0x312 <fdevopen+0x54>
 2f6:	13 87       	std	Z+11, r17	; 0x0b
 2f8:	02 87       	std	Z+10, r16	; 0x0a
 2fa:	81 e8       	ldi	r24, 0x81	; 129
 2fc:	83 83       	std	Z+3, r24	; 0x03
 2fe:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
 302:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
 306:	89 2b       	or	r24, r25
 308:	21 f4       	brne	.+8      	; 0x312 <fdevopen+0x54>
 30a:	f0 93 f1 01 	sts	0x01F1, r31	; 0x8001f1 <__data_end+0x1>
 30e:	e0 93 f0 01 	sts	0x01F0, r30	; 0x8001f0 <__data_end>
 312:	20 97       	sbiw	r28, 0x00	; 0
 314:	c9 f0       	breq	.+50     	; 0x348 <fdevopen+0x8a>
 316:	d1 87       	std	Z+9, r29	; 0x09
 318:	c0 87       	std	Z+8, r28	; 0x08
 31a:	83 81       	ldd	r24, Z+3	; 0x03
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	83 83       	std	Z+3, r24	; 0x03
 320:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end+0x2>
 324:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <__data_end+0x3>
 328:	89 2b       	or	r24, r25
 32a:	71 f4       	brne	.+28     	; 0x348 <fdevopen+0x8a>
 32c:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <__data_end+0x3>
 330:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <__data_end+0x2>
 334:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <__data_end+0x4>
 338:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <__data_end+0x5>
 33c:	89 2b       	or	r24, r25
 33e:	21 f4       	brne	.+8      	; 0x348 <fdevopen+0x8a>
 340:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <__data_end+0x5>
 344:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <__data_end+0x4>
 348:	cf 01       	movw	r24, r30
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <printf>:
 354:	a0 e0       	ldi	r26, 0x00	; 0
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e0 eb       	ldi	r30, 0xB0	; 176
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__prologue_saves__+0x20>
 360:	ae 01       	movw	r20, r28
 362:	4b 5f       	subi	r20, 0xFB	; 251
 364:	5f 4f       	sbci	r21, 0xFF	; 255
 366:	fa 01       	movw	r30, r20
 368:	61 91       	ld	r22, Z+
 36a:	71 91       	ld	r23, Z+
 36c:	af 01       	movw	r20, r30
 36e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end+0x2>
 372:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <__data_end+0x3>
 376:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vfprintf>
 37a:	e2 e0       	ldi	r30, 0x02	; 2
 37c:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__epilogue_restores__+0x20>

00000380 <puts>:
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <__data_end+0x2>
 38c:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <__data_end+0x3>
 390:	23 81       	ldd	r18, Z+3	; 0x03
 392:	21 ff       	sbrs	r18, 1
 394:	1b c0       	rjmp	.+54     	; 0x3cc <puts+0x4c>
 396:	8c 01       	movw	r16, r24
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	f8 01       	movw	r30, r16
 39e:	81 91       	ld	r24, Z+
 3a0:	8f 01       	movw	r16, r30
 3a2:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <__data_end+0x2>
 3a6:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <__data_end+0x3>
 3aa:	db 01       	movw	r26, r22
 3ac:	18 96       	adiw	r26, 0x08	; 8
 3ae:	ed 91       	ld	r30, X+
 3b0:	fc 91       	ld	r31, X
 3b2:	19 97       	sbiw	r26, 0x09	; 9
 3b4:	88 23       	and	r24, r24
 3b6:	31 f0       	breq	.+12     	; 0x3c4 <puts+0x44>
 3b8:	09 95       	icall
 3ba:	89 2b       	or	r24, r25
 3bc:	79 f3       	breq	.-34     	; 0x39c <puts+0x1c>
 3be:	df ef       	ldi	r29, 0xFF	; 255
 3c0:	cf ef       	ldi	r28, 0xFF	; 255
 3c2:	ec cf       	rjmp	.-40     	; 0x39c <puts+0x1c>
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	09 95       	icall
 3c8:	89 2b       	or	r24, r25
 3ca:	19 f0       	breq	.+6      	; 0x3d2 <puts+0x52>
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <puts+0x56>
 3d2:	8d 2f       	mov	r24, r29
 3d4:	9c 2f       	mov	r25, r28
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	08 95       	ret

000003e0 <vfprintf>:
 3e0:	ab e0       	ldi	r26, 0x0B	; 11
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e6 ef       	ldi	r30, 0xF6	; 246
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__prologue_saves__>
 3ec:	6c 01       	movw	r12, r24
 3ee:	7b 01       	movw	r14, r22
 3f0:	8a 01       	movw	r16, r20
 3f2:	fc 01       	movw	r30, r24
 3f4:	17 82       	std	Z+7, r1	; 0x07
 3f6:	16 82       	std	Z+6, r1	; 0x06
 3f8:	83 81       	ldd	r24, Z+3	; 0x03
 3fa:	81 ff       	sbrs	r24, 1
 3fc:	cc c1       	rjmp	.+920    	; 0x796 <__stack+0x297>
 3fe:	ce 01       	movw	r24, r28
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	3c 01       	movw	r6, r24
 404:	f6 01       	movw	r30, r12
 406:	93 81       	ldd	r25, Z+3	; 0x03
 408:	f7 01       	movw	r30, r14
 40a:	93 fd       	sbrc	r25, 3
 40c:	85 91       	lpm	r24, Z+
 40e:	93 ff       	sbrs	r25, 3
 410:	81 91       	ld	r24, Z+
 412:	7f 01       	movw	r14, r30
 414:	88 23       	and	r24, r24
 416:	09 f4       	brne	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	ba c1       	rjmp	.+884    	; 0x78e <__stack+0x28f>
 41a:	85 32       	cpi	r24, 0x25	; 37
 41c:	39 f4       	brne	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41e:	93 fd       	sbrc	r25, 3
 420:	85 91       	lpm	r24, Z+
 422:	93 ff       	sbrs	r25, 3
 424:	81 91       	ld	r24, Z+
 426:	7f 01       	movw	r14, r30
 428:	85 32       	cpi	r24, 0x25	; 37
 42a:	29 f4       	brne	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	b6 01       	movw	r22, r12
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 434:	e7 cf       	rjmp	.-50     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 436:	91 2c       	mov	r9, r1
 438:	21 2c       	mov	r2, r1
 43a:	31 2c       	mov	r3, r1
 43c:	ff e1       	ldi	r31, 0x1F	; 31
 43e:	f3 15       	cp	r31, r3
 440:	d8 f0       	brcs	.+54     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 442:	8b 32       	cpi	r24, 0x2B	; 43
 444:	79 f0       	breq	.+30     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 446:	38 f4       	brcc	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 448:	80 32       	cpi	r24, 0x20	; 32
 44a:	79 f0       	breq	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44c:	83 32       	cpi	r24, 0x23	; 35
 44e:	a1 f4       	brne	.+40     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 450:	23 2d       	mov	r18, r3
 452:	20 61       	ori	r18, 0x10	; 16
 454:	1d c0       	rjmp	.+58     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 456:	8d 32       	cpi	r24, 0x2D	; 45
 458:	61 f0       	breq	.+24     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 45a:	80 33       	cpi	r24, 0x30	; 48
 45c:	69 f4       	brne	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45e:	23 2d       	mov	r18, r3
 460:	21 60       	ori	r18, 0x01	; 1
 462:	16 c0       	rjmp	.+44     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 464:	83 2d       	mov	r24, r3
 466:	82 60       	ori	r24, 0x02	; 2
 468:	38 2e       	mov	r3, r24
 46a:	e3 2d       	mov	r30, r3
 46c:	e4 60       	ori	r30, 0x04	; 4
 46e:	3e 2e       	mov	r3, r30
 470:	2a c0       	rjmp	.+84     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 472:	f3 2d       	mov	r31, r3
 474:	f8 60       	ori	r31, 0x08	; 8
 476:	1d c0       	rjmp	.+58     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 478:	37 fc       	sbrc	r3, 7
 47a:	2d c0       	rjmp	.+90     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 47c:	20 ed       	ldi	r18, 0xD0	; 208
 47e:	28 0f       	add	r18, r24
 480:	2a 30       	cpi	r18, 0x0A	; 10
 482:	40 f0       	brcs	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 484:	8e 32       	cpi	r24, 0x2E	; 46
 486:	b9 f4       	brne	.+46     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 488:	36 fc       	sbrc	r3, 6
 48a:	81 c1       	rjmp	.+770    	; 0x78e <__stack+0x28f>
 48c:	23 2d       	mov	r18, r3
 48e:	20 64       	ori	r18, 0x40	; 64
 490:	32 2e       	mov	r3, r18
 492:	19 c0       	rjmp	.+50     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 494:	36 fe       	sbrs	r3, 6
 496:	06 c0       	rjmp	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 498:	8a e0       	ldi	r24, 0x0A	; 10
 49a:	98 9e       	mul	r9, r24
 49c:	20 0d       	add	r18, r0
 49e:	11 24       	eor	r1, r1
 4a0:	92 2e       	mov	r9, r18
 4a2:	11 c0       	rjmp	.+34     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4a4:	ea e0       	ldi	r30, 0x0A	; 10
 4a6:	2e 9e       	mul	r2, r30
 4a8:	20 0d       	add	r18, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	22 2e       	mov	r2, r18
 4ae:	f3 2d       	mov	r31, r3
 4b0:	f0 62       	ori	r31, 0x20	; 32
 4b2:	3f 2e       	mov	r3, r31
 4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b6:	8c 36       	cpi	r24, 0x6C	; 108
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ba:	83 2d       	mov	r24, r3
 4bc:	80 68       	ori	r24, 0x80	; 128
 4be:	38 2e       	mov	r3, r24
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c2:	88 36       	cpi	r24, 0x68	; 104
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c6:	f7 01       	movw	r30, r14
 4c8:	93 fd       	sbrc	r25, 3
 4ca:	85 91       	lpm	r24, Z+
 4cc:	93 ff       	sbrs	r25, 3
 4ce:	81 91       	ld	r24, Z+
 4d0:	7f 01       	movw	r14, r30
 4d2:	81 11       	cpse	r24, r1
 4d4:	b3 cf       	rjmp	.-154    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 4d6:	98 2f       	mov	r25, r24
 4d8:	9f 7d       	andi	r25, 0xDF	; 223
 4da:	95 54       	subi	r25, 0x45	; 69
 4dc:	93 30       	cpi	r25, 0x03	; 3
 4de:	28 f4       	brcc	.+10     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e0:	0c 5f       	subi	r16, 0xFC	; 252
 4e2:	1f 4f       	sbci	r17, 0xFF	; 255
 4e4:	9f e3       	ldi	r25, 0x3F	; 63
 4e6:	99 83       	std	Y+1, r25	; 0x01
 4e8:	0d c0       	rjmp	.+26     	; 0x504 <__stack+0x5>
 4ea:	83 36       	cpi	r24, 0x63	; 99
 4ec:	31 f0       	breq	.+12     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4ee:	83 37       	cpi	r24, 0x73	; 115
 4f0:	71 f0       	breq	.+28     	; 0x50e <__stack+0xf>
 4f2:	83 35       	cpi	r24, 0x53	; 83
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f6:	59 c0       	rjmp	.+178    	; 0x5aa <__stack+0xab>
 4f8:	21 c0       	rjmp	.+66     	; 0x53c <__stack+0x3d>
 4fa:	f8 01       	movw	r30, r16
 4fc:	80 81       	ld	r24, Z
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	0e 5f       	subi	r16, 0xFE	; 254
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	88 24       	eor	r8, r8
 506:	83 94       	inc	r8
 508:	91 2c       	mov	r9, r1
 50a:	53 01       	movw	r10, r6
 50c:	13 c0       	rjmp	.+38     	; 0x534 <__stack+0x35>
 50e:	28 01       	movw	r4, r16
 510:	f2 e0       	ldi	r31, 0x02	; 2
 512:	4f 0e       	add	r4, r31
 514:	51 1c       	adc	r5, r1
 516:	f8 01       	movw	r30, r16
 518:	a0 80       	ld	r10, Z
 51a:	b1 80       	ldd	r11, Z+1	; 0x01
 51c:	36 fe       	sbrs	r3, 6
 51e:	03 c0       	rjmp	.+6      	; 0x526 <__stack+0x27>
 520:	69 2d       	mov	r22, r9
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <__stack+0x2b>
 526:	6f ef       	ldi	r22, 0xFF	; 255
 528:	7f ef       	ldi	r23, 0xFF	; 255
 52a:	c5 01       	movw	r24, r10
 52c:	0e 94 20 05 	call	0xa40	; 0xa40 <strnlen>
 530:	4c 01       	movw	r8, r24
 532:	82 01       	movw	r16, r4
 534:	f3 2d       	mov	r31, r3
 536:	ff 77       	andi	r31, 0x7F	; 127
 538:	3f 2e       	mov	r3, r31
 53a:	16 c0       	rjmp	.+44     	; 0x568 <__stack+0x69>
 53c:	28 01       	movw	r4, r16
 53e:	22 e0       	ldi	r18, 0x02	; 2
 540:	42 0e       	add	r4, r18
 542:	51 1c       	adc	r5, r1
 544:	f8 01       	movw	r30, r16
 546:	a0 80       	ld	r10, Z
 548:	b1 80       	ldd	r11, Z+1	; 0x01
 54a:	36 fe       	sbrs	r3, 6
 54c:	03 c0       	rjmp	.+6      	; 0x554 <__stack+0x55>
 54e:	69 2d       	mov	r22, r9
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__stack+0x59>
 554:	6f ef       	ldi	r22, 0xFF	; 255
 556:	7f ef       	ldi	r23, 0xFF	; 255
 558:	c5 01       	movw	r24, r10
 55a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strnlen_P>
 55e:	4c 01       	movw	r8, r24
 560:	f3 2d       	mov	r31, r3
 562:	f0 68       	ori	r31, 0x80	; 128
 564:	3f 2e       	mov	r3, r31
 566:	82 01       	movw	r16, r4
 568:	33 fc       	sbrc	r3, 3
 56a:	1b c0       	rjmp	.+54     	; 0x5a2 <__stack+0xa3>
 56c:	82 2d       	mov	r24, r2
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	88 16       	cp	r8, r24
 572:	99 06       	cpc	r9, r25
 574:	b0 f4       	brcc	.+44     	; 0x5a2 <__stack+0xa3>
 576:	b6 01       	movw	r22, r12
 578:	80 e2       	ldi	r24, 0x20	; 32
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 580:	2a 94       	dec	r2
 582:	f4 cf       	rjmp	.-24     	; 0x56c <__stack+0x6d>
 584:	f5 01       	movw	r30, r10
 586:	37 fc       	sbrc	r3, 7
 588:	85 91       	lpm	r24, Z+
 58a:	37 fe       	sbrs	r3, 7
 58c:	81 91       	ld	r24, Z+
 58e:	5f 01       	movw	r10, r30
 590:	b6 01       	movw	r22, r12
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 598:	21 10       	cpse	r2, r1
 59a:	2a 94       	dec	r2
 59c:	21 e0       	ldi	r18, 0x01	; 1
 59e:	82 1a       	sub	r8, r18
 5a0:	91 08       	sbc	r9, r1
 5a2:	81 14       	cp	r8, r1
 5a4:	91 04       	cpc	r9, r1
 5a6:	71 f7       	brne	.-36     	; 0x584 <__stack+0x85>
 5a8:	e8 c0       	rjmp	.+464    	; 0x77a <__stack+0x27b>
 5aa:	84 36       	cpi	r24, 0x64	; 100
 5ac:	11 f0       	breq	.+4      	; 0x5b2 <__stack+0xb3>
 5ae:	89 36       	cpi	r24, 0x69	; 105
 5b0:	41 f5       	brne	.+80     	; 0x602 <__stack+0x103>
 5b2:	f8 01       	movw	r30, r16
 5b4:	37 fe       	sbrs	r3, 7
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <__stack+0xc7>
 5b8:	60 81       	ld	r22, Z
 5ba:	71 81       	ldd	r23, Z+1	; 0x01
 5bc:	82 81       	ldd	r24, Z+2	; 0x02
 5be:	93 81       	ldd	r25, Z+3	; 0x03
 5c0:	0c 5f       	subi	r16, 0xFC	; 252
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <__stack+0xd7>
 5c6:	60 81       	ld	r22, Z
 5c8:	71 81       	ldd	r23, Z+1	; 0x01
 5ca:	07 2e       	mov	r0, r23
 5cc:	00 0c       	add	r0, r0
 5ce:	88 0b       	sbc	r24, r24
 5d0:	99 0b       	sbc	r25, r25
 5d2:	0e 5f       	subi	r16, 0xFE	; 254
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
 5d6:	f3 2d       	mov	r31, r3
 5d8:	ff 76       	andi	r31, 0x6F	; 111
 5da:	3f 2e       	mov	r3, r31
 5dc:	97 ff       	sbrs	r25, 7
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <__stack+0xf3>
 5e0:	90 95       	com	r25
 5e2:	80 95       	com	r24
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	f0 68       	ori	r31, 0x80	; 128
 5f0:	3f 2e       	mov	r3, r31
 5f2:	2a e0       	ldi	r18, 0x0A	; 10
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	a3 01       	movw	r20, r6
 5f8:	0e 94 67 05 	call	0xace	; 0xace <__ultoa_invert>
 5fc:	88 2e       	mov	r8, r24
 5fe:	86 18       	sub	r8, r6
 600:	45 c0       	rjmp	.+138    	; 0x68c <__stack+0x18d>
 602:	85 37       	cpi	r24, 0x75	; 117
 604:	31 f4       	brne	.+12     	; 0x612 <__stack+0x113>
 606:	23 2d       	mov	r18, r3
 608:	2f 7e       	andi	r18, 0xEF	; 239
 60a:	b2 2e       	mov	r11, r18
 60c:	2a e0       	ldi	r18, 0x0A	; 10
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	25 c0       	rjmp	.+74     	; 0x65c <__stack+0x15d>
 612:	93 2d       	mov	r25, r3
 614:	99 7f       	andi	r25, 0xF9	; 249
 616:	b9 2e       	mov	r11, r25
 618:	8f 36       	cpi	r24, 0x6F	; 111
 61a:	c1 f0       	breq	.+48     	; 0x64c <__stack+0x14d>
 61c:	18 f4       	brcc	.+6      	; 0x624 <__stack+0x125>
 61e:	88 35       	cpi	r24, 0x58	; 88
 620:	79 f0       	breq	.+30     	; 0x640 <__stack+0x141>
 622:	b5 c0       	rjmp	.+362    	; 0x78e <__stack+0x28f>
 624:	80 37       	cpi	r24, 0x70	; 112
 626:	19 f0       	breq	.+6      	; 0x62e <__stack+0x12f>
 628:	88 37       	cpi	r24, 0x78	; 120
 62a:	21 f0       	breq	.+8      	; 0x634 <__stack+0x135>
 62c:	b0 c0       	rjmp	.+352    	; 0x78e <__stack+0x28f>
 62e:	e9 2f       	mov	r30, r25
 630:	e0 61       	ori	r30, 0x10	; 16
 632:	be 2e       	mov	r11, r30
 634:	b4 fe       	sbrs	r11, 4
 636:	0d c0       	rjmp	.+26     	; 0x652 <__stack+0x153>
 638:	fb 2d       	mov	r31, r11
 63a:	f4 60       	ori	r31, 0x04	; 4
 63c:	bf 2e       	mov	r11, r31
 63e:	09 c0       	rjmp	.+18     	; 0x652 <__stack+0x153>
 640:	34 fe       	sbrs	r3, 4
 642:	0a c0       	rjmp	.+20     	; 0x658 <__stack+0x159>
 644:	29 2f       	mov	r18, r25
 646:	26 60       	ori	r18, 0x06	; 6
 648:	b2 2e       	mov	r11, r18
 64a:	06 c0       	rjmp	.+12     	; 0x658 <__stack+0x159>
 64c:	28 e0       	ldi	r18, 0x08	; 8
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	05 c0       	rjmp	.+10     	; 0x65c <__stack+0x15d>
 652:	20 e1       	ldi	r18, 0x10	; 16
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <__stack+0x15d>
 658:	20 e1       	ldi	r18, 0x10	; 16
 65a:	32 e0       	ldi	r19, 0x02	; 2
 65c:	f8 01       	movw	r30, r16
 65e:	b7 fe       	sbrs	r11, 7
 660:	07 c0       	rjmp	.+14     	; 0x670 <__stack+0x171>
 662:	60 81       	ld	r22, Z
 664:	71 81       	ldd	r23, Z+1	; 0x01
 666:	82 81       	ldd	r24, Z+2	; 0x02
 668:	93 81       	ldd	r25, Z+3	; 0x03
 66a:	0c 5f       	subi	r16, 0xFC	; 252
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	06 c0       	rjmp	.+12     	; 0x67c <__stack+0x17d>
 670:	60 81       	ld	r22, Z
 672:	71 81       	ldd	r23, Z+1	; 0x01
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 5f       	subi	r16, 0xFE	; 254
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	a3 01       	movw	r20, r6
 67e:	0e 94 67 05 	call	0xace	; 0xace <__ultoa_invert>
 682:	88 2e       	mov	r8, r24
 684:	86 18       	sub	r8, r6
 686:	fb 2d       	mov	r31, r11
 688:	ff 77       	andi	r31, 0x7F	; 127
 68a:	3f 2e       	mov	r3, r31
 68c:	36 fe       	sbrs	r3, 6
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <__stack+0x1ab>
 690:	23 2d       	mov	r18, r3
 692:	2e 7f       	andi	r18, 0xFE	; 254
 694:	a2 2e       	mov	r10, r18
 696:	89 14       	cp	r8, r9
 698:	58 f4       	brcc	.+22     	; 0x6b0 <__stack+0x1b1>
 69a:	34 fe       	sbrs	r3, 4
 69c:	0b c0       	rjmp	.+22     	; 0x6b4 <__stack+0x1b5>
 69e:	32 fc       	sbrc	r3, 2
 6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <__stack+0x1b5>
 6a2:	83 2d       	mov	r24, r3
 6a4:	8e 7e       	andi	r24, 0xEE	; 238
 6a6:	a8 2e       	mov	r10, r24
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <__stack+0x1b5>
 6aa:	b8 2c       	mov	r11, r8
 6ac:	a3 2c       	mov	r10, r3
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <__stack+0x1b7>
 6b0:	b8 2c       	mov	r11, r8
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <__stack+0x1b7>
 6b4:	b9 2c       	mov	r11, r9
 6b6:	a4 fe       	sbrs	r10, 4
 6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <__stack+0x1d9>
 6ba:	fe 01       	movw	r30, r28
 6bc:	e8 0d       	add	r30, r8
 6be:	f1 1d       	adc	r31, r1
 6c0:	80 81       	ld	r24, Z
 6c2:	80 33       	cpi	r24, 0x30	; 48
 6c4:	21 f4       	brne	.+8      	; 0x6ce <__stack+0x1cf>
 6c6:	9a 2d       	mov	r25, r10
 6c8:	99 7e       	andi	r25, 0xE9	; 233
 6ca:	a9 2e       	mov	r10, r25
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <__stack+0x1e1>
 6ce:	a2 fe       	sbrs	r10, 2
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <__stack+0x1df>
 6d2:	b3 94       	inc	r11
 6d4:	b3 94       	inc	r11
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <__stack+0x1e1>
 6d8:	8a 2d       	mov	r24, r10
 6da:	86 78       	andi	r24, 0x86	; 134
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__stack+0x1e1>
 6de:	b3 94       	inc	r11
 6e0:	a3 fc       	sbrc	r10, 3
 6e2:	11 c0       	rjmp	.+34     	; 0x706 <__stack+0x207>
 6e4:	a0 fe       	sbrs	r10, 0
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <__stack+0x1f5>
 6e8:	b2 14       	cp	r11, r2
 6ea:	88 f4       	brcc	.+34     	; 0x70e <__stack+0x20f>
 6ec:	28 0c       	add	r2, r8
 6ee:	92 2c       	mov	r9, r2
 6f0:	9b 18       	sub	r9, r11
 6f2:	0e c0       	rjmp	.+28     	; 0x710 <__stack+0x211>
 6f4:	b2 14       	cp	r11, r2
 6f6:	60 f4       	brcc	.+24     	; 0x710 <__stack+0x211>
 6f8:	b6 01       	movw	r22, r12
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 702:	b3 94       	inc	r11
 704:	f7 cf       	rjmp	.-18     	; 0x6f4 <__stack+0x1f5>
 706:	b2 14       	cp	r11, r2
 708:	18 f4       	brcc	.+6      	; 0x710 <__stack+0x211>
 70a:	2b 18       	sub	r2, r11
 70c:	02 c0       	rjmp	.+4      	; 0x712 <__stack+0x213>
 70e:	98 2c       	mov	r9, r8
 710:	21 2c       	mov	r2, r1
 712:	a4 fe       	sbrs	r10, 4
 714:	10 c0       	rjmp	.+32     	; 0x736 <__stack+0x237>
 716:	b6 01       	movw	r22, r12
 718:	80 e3       	ldi	r24, 0x30	; 48
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 720:	a2 fe       	sbrs	r10, 2
 722:	17 c0       	rjmp	.+46     	; 0x752 <__stack+0x253>
 724:	a1 fc       	sbrc	r10, 1
 726:	03 c0       	rjmp	.+6      	; 0x72e <__stack+0x22f>
 728:	88 e7       	ldi	r24, 0x78	; 120
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <__stack+0x233>
 72e:	88 e5       	ldi	r24, 0x58	; 88
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	b6 01       	movw	r22, r12
 734:	0c c0       	rjmp	.+24     	; 0x74e <__stack+0x24f>
 736:	8a 2d       	mov	r24, r10
 738:	86 78       	andi	r24, 0x86	; 134
 73a:	59 f0       	breq	.+22     	; 0x752 <__stack+0x253>
 73c:	a1 fe       	sbrs	r10, 1
 73e:	02 c0       	rjmp	.+4      	; 0x744 <__stack+0x245>
 740:	8b e2       	ldi	r24, 0x2B	; 43
 742:	01 c0       	rjmp	.+2      	; 0x746 <__stack+0x247>
 744:	80 e2       	ldi	r24, 0x20	; 32
 746:	a7 fc       	sbrc	r10, 7
 748:	8d e2       	ldi	r24, 0x2D	; 45
 74a:	b6 01       	movw	r22, r12
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 752:	89 14       	cp	r8, r9
 754:	38 f4       	brcc	.+14     	; 0x764 <__stack+0x265>
 756:	b6 01       	movw	r22, r12
 758:	80 e3       	ldi	r24, 0x30	; 48
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 760:	9a 94       	dec	r9
 762:	f7 cf       	rjmp	.-18     	; 0x752 <__stack+0x253>
 764:	8a 94       	dec	r8
 766:	f3 01       	movw	r30, r6
 768:	e8 0d       	add	r30, r8
 76a:	f1 1d       	adc	r31, r1
 76c:	80 81       	ld	r24, Z
 76e:	b6 01       	movw	r22, r12
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 776:	81 10       	cpse	r8, r1
 778:	f5 cf       	rjmp	.-22     	; 0x764 <__stack+0x265>
 77a:	22 20       	and	r2, r2
 77c:	09 f4       	brne	.+2      	; 0x780 <__stack+0x281>
 77e:	42 ce       	rjmp	.-892    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 780:	b6 01       	movw	r22, r12
 782:	80 e2       	ldi	r24, 0x20	; 32
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 2b 05 	call	0xa56	; 0xa56 <fputc>
 78a:	2a 94       	dec	r2
 78c:	f6 cf       	rjmp	.-20     	; 0x77a <__stack+0x27b>
 78e:	f6 01       	movw	r30, r12
 790:	86 81       	ldd	r24, Z+6	; 0x06
 792:	97 81       	ldd	r25, Z+7	; 0x07
 794:	02 c0       	rjmp	.+4      	; 0x79a <__stack+0x29b>
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	9f ef       	ldi	r25, 0xFF	; 255
 79a:	2b 96       	adiw	r28, 0x0b	; 11
 79c:	e2 e1       	ldi	r30, 0x12	; 18
 79e:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__epilogue_restores__>

000007a2 <calloc>:
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	86 9f       	mul	r24, r22
 7ac:	80 01       	movw	r16, r0
 7ae:	87 9f       	mul	r24, r23
 7b0:	10 0d       	add	r17, r0
 7b2:	96 9f       	mul	r25, r22
 7b4:	10 0d       	add	r17, r0
 7b6:	11 24       	eor	r1, r1
 7b8:	c8 01       	movw	r24, r16
 7ba:	0e 94 ed 03 	call	0x7da	; 0x7da <malloc>
 7be:	ec 01       	movw	r28, r24
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	29 f0       	breq	.+10     	; 0x7ce <calloc+0x2c>
 7c4:	a8 01       	movw	r20, r16
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	0e 94 19 05 	call	0xa32	; 0xa32 <memset>
 7ce:	ce 01       	movw	r24, r28
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	1f 91       	pop	r17
 7d6:	0f 91       	pop	r16
 7d8:	08 95       	ret

000007da <malloc>:
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	91 05       	cpc	r25, r1
 7e6:	10 f4       	brcc	.+4      	; 0x7ec <malloc+0x12>
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <__flp>
 7f0:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <__flp+0x1>
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	a0 e0       	ldi	r26, 0x00	; 0
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	30 97       	sbiw	r30, 0x00	; 0
 7fe:	19 f1       	breq	.+70     	; 0x846 <malloc+0x6c>
 800:	40 81       	ld	r20, Z
 802:	51 81       	ldd	r21, Z+1	; 0x01
 804:	02 81       	ldd	r16, Z+2	; 0x02
 806:	13 81       	ldd	r17, Z+3	; 0x03
 808:	48 17       	cp	r20, r24
 80a:	59 07       	cpc	r21, r25
 80c:	c8 f0       	brcs	.+50     	; 0x840 <malloc+0x66>
 80e:	84 17       	cp	r24, r20
 810:	95 07       	cpc	r25, r21
 812:	69 f4       	brne	.+26     	; 0x82e <malloc+0x54>
 814:	10 97       	sbiw	r26, 0x00	; 0
 816:	31 f0       	breq	.+12     	; 0x824 <malloc+0x4a>
 818:	12 96       	adiw	r26, 0x02	; 2
 81a:	0c 93       	st	X, r16
 81c:	12 97       	sbiw	r26, 0x02	; 2
 81e:	13 96       	adiw	r26, 0x03	; 3
 820:	1c 93       	st	X, r17
 822:	27 c0       	rjmp	.+78     	; 0x872 <malloc+0x98>
 824:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <__flp>
 828:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <__flp+0x1>
 82c:	22 c0       	rjmp	.+68     	; 0x872 <malloc+0x98>
 82e:	21 15       	cp	r18, r1
 830:	31 05       	cpc	r19, r1
 832:	19 f0       	breq	.+6      	; 0x83a <malloc+0x60>
 834:	42 17       	cp	r20, r18
 836:	53 07       	cpc	r21, r19
 838:	18 f4       	brcc	.+6      	; 0x840 <malloc+0x66>
 83a:	9a 01       	movw	r18, r20
 83c:	bd 01       	movw	r22, r26
 83e:	ef 01       	movw	r28, r30
 840:	df 01       	movw	r26, r30
 842:	f8 01       	movw	r30, r16
 844:	db cf       	rjmp	.-74     	; 0x7fc <malloc+0x22>
 846:	21 15       	cp	r18, r1
 848:	31 05       	cpc	r19, r1
 84a:	f9 f0       	breq	.+62     	; 0x88a <malloc+0xb0>
 84c:	28 1b       	sub	r18, r24
 84e:	39 0b       	sbc	r19, r25
 850:	24 30       	cpi	r18, 0x04	; 4
 852:	31 05       	cpc	r19, r1
 854:	80 f4       	brcc	.+32     	; 0x876 <malloc+0x9c>
 856:	8a 81       	ldd	r24, Y+2	; 0x02
 858:	9b 81       	ldd	r25, Y+3	; 0x03
 85a:	61 15       	cp	r22, r1
 85c:	71 05       	cpc	r23, r1
 85e:	21 f0       	breq	.+8      	; 0x868 <malloc+0x8e>
 860:	fb 01       	movw	r30, r22
 862:	93 83       	std	Z+3, r25	; 0x03
 864:	82 83       	std	Z+2, r24	; 0x02
 866:	04 c0       	rjmp	.+8      	; 0x870 <malloc+0x96>
 868:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <__flp+0x1>
 86c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <__flp>
 870:	fe 01       	movw	r30, r28
 872:	32 96       	adiw	r30, 0x02	; 2
 874:	44 c0       	rjmp	.+136    	; 0x8fe <malloc+0x124>
 876:	fe 01       	movw	r30, r28
 878:	e2 0f       	add	r30, r18
 87a:	f3 1f       	adc	r31, r19
 87c:	81 93       	st	Z+, r24
 87e:	91 93       	st	Z+, r25
 880:	22 50       	subi	r18, 0x02	; 2
 882:	31 09       	sbc	r19, r1
 884:	39 83       	std	Y+1, r19	; 0x01
 886:	28 83       	st	Y, r18
 888:	3a c0       	rjmp	.+116    	; 0x8fe <malloc+0x124>
 88a:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__brkval>
 88e:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__brkval+0x1>
 892:	23 2b       	or	r18, r19
 894:	41 f4       	brne	.+16     	; 0x8a6 <malloc+0xcc>
 896:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 89a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 89e:	30 93 f7 01 	sts	0x01F7, r19	; 0x8001f7 <__brkval+0x1>
 8a2:	20 93 f6 01 	sts	0x01F6, r18	; 0x8001f6 <__brkval>
 8a6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 8aa:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 8ae:	21 15       	cp	r18, r1
 8b0:	31 05       	cpc	r19, r1
 8b2:	41 f4       	brne	.+16     	; 0x8c4 <malloc+0xea>
 8b4:	2d b7       	in	r18, 0x3d	; 61
 8b6:	3e b7       	in	r19, 0x3e	; 62
 8b8:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 8bc:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 8c0:	24 1b       	sub	r18, r20
 8c2:	35 0b       	sbc	r19, r21
 8c4:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <__brkval>
 8c8:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <__brkval+0x1>
 8cc:	e2 17       	cp	r30, r18
 8ce:	f3 07       	cpc	r31, r19
 8d0:	a0 f4       	brcc	.+40     	; 0x8fa <malloc+0x120>
 8d2:	2e 1b       	sub	r18, r30
 8d4:	3f 0b       	sbc	r19, r31
 8d6:	28 17       	cp	r18, r24
 8d8:	39 07       	cpc	r19, r25
 8da:	78 f0       	brcs	.+30     	; 0x8fa <malloc+0x120>
 8dc:	ac 01       	movw	r20, r24
 8de:	4e 5f       	subi	r20, 0xFE	; 254
 8e0:	5f 4f       	sbci	r21, 0xFF	; 255
 8e2:	24 17       	cp	r18, r20
 8e4:	35 07       	cpc	r19, r21
 8e6:	48 f0       	brcs	.+18     	; 0x8fa <malloc+0x120>
 8e8:	4e 0f       	add	r20, r30
 8ea:	5f 1f       	adc	r21, r31
 8ec:	50 93 f7 01 	sts	0x01F7, r21	; 0x8001f7 <__brkval+0x1>
 8f0:	40 93 f6 01 	sts	0x01F6, r20	; 0x8001f6 <__brkval>
 8f4:	81 93       	st	Z+, r24
 8f6:	91 93       	st	Z+, r25
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <malloc+0x124>
 8fa:	e0 e0       	ldi	r30, 0x00	; 0
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	cf 01       	movw	r24, r30
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	08 95       	ret

0000090a <free>:
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	00 97       	sbiw	r24, 0x00	; 0
 910:	09 f4       	brne	.+2      	; 0x914 <free+0xa>
 912:	81 c0       	rjmp	.+258    	; 0xa16 <free+0x10c>
 914:	fc 01       	movw	r30, r24
 916:	32 97       	sbiw	r30, 0x02	; 2
 918:	13 82       	std	Z+3, r1	; 0x03
 91a:	12 82       	std	Z+2, r1	; 0x02
 91c:	a0 91 f8 01 	lds	r26, 0x01F8	; 0x8001f8 <__flp>
 920:	b0 91 f9 01 	lds	r27, 0x01F9	; 0x8001f9 <__flp+0x1>
 924:	10 97       	sbiw	r26, 0x00	; 0
 926:	81 f4       	brne	.+32     	; 0x948 <free+0x3e>
 928:	20 81       	ld	r18, Z
 92a:	31 81       	ldd	r19, Z+1	; 0x01
 92c:	82 0f       	add	r24, r18
 92e:	93 1f       	adc	r25, r19
 930:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__brkval>
 934:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__brkval+0x1>
 938:	28 17       	cp	r18, r24
 93a:	39 07       	cpc	r19, r25
 93c:	51 f5       	brne	.+84     	; 0x992 <free+0x88>
 93e:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <__brkval+0x1>
 942:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <__brkval>
 946:	67 c0       	rjmp	.+206    	; 0xa16 <free+0x10c>
 948:	ed 01       	movw	r28, r26
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	ce 17       	cp	r28, r30
 950:	df 07       	cpc	r29, r31
 952:	40 f4       	brcc	.+16     	; 0x964 <free+0x5a>
 954:	4a 81       	ldd	r20, Y+2	; 0x02
 956:	5b 81       	ldd	r21, Y+3	; 0x03
 958:	9e 01       	movw	r18, r28
 95a:	41 15       	cp	r20, r1
 95c:	51 05       	cpc	r21, r1
 95e:	f1 f0       	breq	.+60     	; 0x99c <free+0x92>
 960:	ea 01       	movw	r28, r20
 962:	f5 cf       	rjmp	.-22     	; 0x94e <free+0x44>
 964:	d3 83       	std	Z+3, r29	; 0x03
 966:	c2 83       	std	Z+2, r28	; 0x02
 968:	40 81       	ld	r20, Z
 96a:	51 81       	ldd	r21, Z+1	; 0x01
 96c:	84 0f       	add	r24, r20
 96e:	95 1f       	adc	r25, r21
 970:	c8 17       	cp	r28, r24
 972:	d9 07       	cpc	r29, r25
 974:	59 f4       	brne	.+22     	; 0x98c <free+0x82>
 976:	88 81       	ld	r24, Y
 978:	99 81       	ldd	r25, Y+1	; 0x01
 97a:	84 0f       	add	r24, r20
 97c:	95 1f       	adc	r25, r21
 97e:	02 96       	adiw	r24, 0x02	; 2
 980:	91 83       	std	Z+1, r25	; 0x01
 982:	80 83       	st	Z, r24
 984:	8a 81       	ldd	r24, Y+2	; 0x02
 986:	9b 81       	ldd	r25, Y+3	; 0x03
 988:	93 83       	std	Z+3, r25	; 0x03
 98a:	82 83       	std	Z+2, r24	; 0x02
 98c:	21 15       	cp	r18, r1
 98e:	31 05       	cpc	r19, r1
 990:	29 f4       	brne	.+10     	; 0x99c <free+0x92>
 992:	f0 93 f9 01 	sts	0x01F9, r31	; 0x8001f9 <__flp+0x1>
 996:	e0 93 f8 01 	sts	0x01F8, r30	; 0x8001f8 <__flp>
 99a:	3d c0       	rjmp	.+122    	; 0xa16 <free+0x10c>
 99c:	e9 01       	movw	r28, r18
 99e:	fb 83       	std	Y+3, r31	; 0x03
 9a0:	ea 83       	std	Y+2, r30	; 0x02
 9a2:	49 91       	ld	r20, Y+
 9a4:	59 91       	ld	r21, Y+
 9a6:	c4 0f       	add	r28, r20
 9a8:	d5 1f       	adc	r29, r21
 9aa:	ec 17       	cp	r30, r28
 9ac:	fd 07       	cpc	r31, r29
 9ae:	61 f4       	brne	.+24     	; 0x9c8 <free+0xbe>
 9b0:	80 81       	ld	r24, Z
 9b2:	91 81       	ldd	r25, Z+1	; 0x01
 9b4:	84 0f       	add	r24, r20
 9b6:	95 1f       	adc	r25, r21
 9b8:	02 96       	adiw	r24, 0x02	; 2
 9ba:	e9 01       	movw	r28, r18
 9bc:	99 83       	std	Y+1, r25	; 0x01
 9be:	88 83       	st	Y, r24
 9c0:	82 81       	ldd	r24, Z+2	; 0x02
 9c2:	93 81       	ldd	r25, Z+3	; 0x03
 9c4:	9b 83       	std	Y+3, r25	; 0x03
 9c6:	8a 83       	std	Y+2, r24	; 0x02
 9c8:	e0 e0       	ldi	r30, 0x00	; 0
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	12 96       	adiw	r26, 0x02	; 2
 9ce:	8d 91       	ld	r24, X+
 9d0:	9c 91       	ld	r25, X
 9d2:	13 97       	sbiw	r26, 0x03	; 3
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	19 f0       	breq	.+6      	; 0x9de <free+0xd4>
 9d8:	fd 01       	movw	r30, r26
 9da:	dc 01       	movw	r26, r24
 9dc:	f7 cf       	rjmp	.-18     	; 0x9cc <free+0xc2>
 9de:	8d 91       	ld	r24, X+
 9e0:	9c 91       	ld	r25, X
 9e2:	11 97       	sbiw	r26, 0x01	; 1
 9e4:	9d 01       	movw	r18, r26
 9e6:	2e 5f       	subi	r18, 0xFE	; 254
 9e8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ea:	82 0f       	add	r24, r18
 9ec:	93 1f       	adc	r25, r19
 9ee:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__brkval>
 9f2:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__brkval+0x1>
 9f6:	28 17       	cp	r18, r24
 9f8:	39 07       	cpc	r19, r25
 9fa:	69 f4       	brne	.+26     	; 0xa16 <free+0x10c>
 9fc:	30 97       	sbiw	r30, 0x00	; 0
 9fe:	29 f4       	brne	.+10     	; 0xa0a <free+0x100>
 a00:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <__flp+0x1>
 a04:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <__flp>
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <free+0x104>
 a0a:	13 82       	std	Z+3, r1	; 0x03
 a0c:	12 82       	std	Z+2, r1	; 0x02
 a0e:	b0 93 f7 01 	sts	0x01F7, r27	; 0x8001f7 <__brkval+0x1>
 a12:	a0 93 f6 01 	sts	0x01F6, r26	; 0x8001f6 <__brkval>
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	08 95       	ret

00000a1c <strnlen_P>:
 a1c:	fc 01       	movw	r30, r24
 a1e:	05 90       	lpm	r0, Z+
 a20:	61 50       	subi	r22, 0x01	; 1
 a22:	70 40       	sbci	r23, 0x00	; 0
 a24:	01 10       	cpse	r0, r1
 a26:	d8 f7       	brcc	.-10     	; 0xa1e <strnlen_P+0x2>
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	8e 0f       	add	r24, r30
 a2e:	9f 1f       	adc	r25, r31
 a30:	08 95       	ret

00000a32 <memset>:
 a32:	dc 01       	movw	r26, r24
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <memset+0x6>
 a36:	6d 93       	st	X+, r22
 a38:	41 50       	subi	r20, 0x01	; 1
 a3a:	50 40       	sbci	r21, 0x00	; 0
 a3c:	e0 f7       	brcc	.-8      	; 0xa36 <memset+0x4>
 a3e:	08 95       	ret

00000a40 <strnlen>:
 a40:	fc 01       	movw	r30, r24
 a42:	61 50       	subi	r22, 0x01	; 1
 a44:	70 40       	sbci	r23, 0x00	; 0
 a46:	01 90       	ld	r0, Z+
 a48:	01 10       	cpse	r0, r1
 a4a:	d8 f7       	brcc	.-10     	; 0xa42 <strnlen+0x2>
 a4c:	80 95       	com	r24
 a4e:	90 95       	com	r25
 a50:	8e 0f       	add	r24, r30
 a52:	9f 1f       	adc	r25, r31
 a54:	08 95       	ret

00000a56 <fputc>:
 a56:	0f 93       	push	r16
 a58:	1f 93       	push	r17
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	fb 01       	movw	r30, r22
 a60:	23 81       	ldd	r18, Z+3	; 0x03
 a62:	21 fd       	sbrc	r18, 1
 a64:	03 c0       	rjmp	.+6      	; 0xa6c <fputc+0x16>
 a66:	8f ef       	ldi	r24, 0xFF	; 255
 a68:	9f ef       	ldi	r25, 0xFF	; 255
 a6a:	2c c0       	rjmp	.+88     	; 0xac4 <fputc+0x6e>
 a6c:	22 ff       	sbrs	r18, 2
 a6e:	16 c0       	rjmp	.+44     	; 0xa9c <fputc+0x46>
 a70:	46 81       	ldd	r20, Z+6	; 0x06
 a72:	57 81       	ldd	r21, Z+7	; 0x07
 a74:	24 81       	ldd	r18, Z+4	; 0x04
 a76:	35 81       	ldd	r19, Z+5	; 0x05
 a78:	42 17       	cp	r20, r18
 a7a:	53 07       	cpc	r21, r19
 a7c:	44 f4       	brge	.+16     	; 0xa8e <fputc+0x38>
 a7e:	a0 81       	ld	r26, Z
 a80:	b1 81       	ldd	r27, Z+1	; 0x01
 a82:	9d 01       	movw	r18, r26
 a84:	2f 5f       	subi	r18, 0xFF	; 255
 a86:	3f 4f       	sbci	r19, 0xFF	; 255
 a88:	31 83       	std	Z+1, r19	; 0x01
 a8a:	20 83       	st	Z, r18
 a8c:	8c 93       	st	X, r24
 a8e:	26 81       	ldd	r18, Z+6	; 0x06
 a90:	37 81       	ldd	r19, Z+7	; 0x07
 a92:	2f 5f       	subi	r18, 0xFF	; 255
 a94:	3f 4f       	sbci	r19, 0xFF	; 255
 a96:	37 83       	std	Z+7, r19	; 0x07
 a98:	26 83       	std	Z+6, r18	; 0x06
 a9a:	14 c0       	rjmp	.+40     	; 0xac4 <fputc+0x6e>
 a9c:	8b 01       	movw	r16, r22
 a9e:	ec 01       	movw	r28, r24
 aa0:	fb 01       	movw	r30, r22
 aa2:	00 84       	ldd	r0, Z+8	; 0x08
 aa4:	f1 85       	ldd	r31, Z+9	; 0x09
 aa6:	e0 2d       	mov	r30, r0
 aa8:	09 95       	icall
 aaa:	89 2b       	or	r24, r25
 aac:	e1 f6       	brne	.-72     	; 0xa66 <fputc+0x10>
 aae:	d8 01       	movw	r26, r16
 ab0:	16 96       	adiw	r26, 0x06	; 6
 ab2:	8d 91       	ld	r24, X+
 ab4:	9c 91       	ld	r25, X
 ab6:	17 97       	sbiw	r26, 0x07	; 7
 ab8:	01 96       	adiw	r24, 0x01	; 1
 aba:	17 96       	adiw	r26, 0x07	; 7
 abc:	9c 93       	st	X, r25
 abe:	8e 93       	st	-X, r24
 ac0:	16 97       	sbiw	r26, 0x06	; 6
 ac2:	ce 01       	movw	r24, r28
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	1f 91       	pop	r17
 aca:	0f 91       	pop	r16
 acc:	08 95       	ret

00000ace <__ultoa_invert>:
 ace:	fa 01       	movw	r30, r20
 ad0:	aa 27       	eor	r26, r26
 ad2:	28 30       	cpi	r18, 0x08	; 8
 ad4:	51 f1       	breq	.+84     	; 0xb2a <__ultoa_invert+0x5c>
 ad6:	20 31       	cpi	r18, 0x10	; 16
 ad8:	81 f1       	breq	.+96     	; 0xb3a <__ultoa_invert+0x6c>
 ada:	e8 94       	clt
 adc:	6f 93       	push	r22
 ade:	6e 7f       	andi	r22, 0xFE	; 254
 ae0:	6e 5f       	subi	r22, 0xFE	; 254
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	af 4f       	sbci	r26, 0xFF	; 255
 aea:	b1 e0       	ldi	r27, 0x01	; 1
 aec:	3e d0       	rcall	.+124    	; 0xb6a <__ultoa_invert+0x9c>
 aee:	b4 e0       	ldi	r27, 0x04	; 4
 af0:	3c d0       	rcall	.+120    	; 0xb6a <__ultoa_invert+0x9c>
 af2:	67 0f       	add	r22, r23
 af4:	78 1f       	adc	r23, r24
 af6:	89 1f       	adc	r24, r25
 af8:	9a 1f       	adc	r25, r26
 afa:	a1 1d       	adc	r26, r1
 afc:	68 0f       	add	r22, r24
 afe:	79 1f       	adc	r23, r25
 b00:	8a 1f       	adc	r24, r26
 b02:	91 1d       	adc	r25, r1
 b04:	a1 1d       	adc	r26, r1
 b06:	6a 0f       	add	r22, r26
 b08:	71 1d       	adc	r23, r1
 b0a:	81 1d       	adc	r24, r1
 b0c:	91 1d       	adc	r25, r1
 b0e:	a1 1d       	adc	r26, r1
 b10:	20 d0       	rcall	.+64     	; 0xb52 <__ultoa_invert+0x84>
 b12:	09 f4       	brne	.+2      	; 0xb16 <__ultoa_invert+0x48>
 b14:	68 94       	set
 b16:	3f 91       	pop	r19
 b18:	2a e0       	ldi	r18, 0x0A	; 10
 b1a:	26 9f       	mul	r18, r22
 b1c:	11 24       	eor	r1, r1
 b1e:	30 19       	sub	r19, r0
 b20:	30 5d       	subi	r19, 0xD0	; 208
 b22:	31 93       	st	Z+, r19
 b24:	de f6       	brtc	.-74     	; 0xadc <__ultoa_invert+0xe>
 b26:	cf 01       	movw	r24, r30
 b28:	08 95       	ret
 b2a:	46 2f       	mov	r20, r22
 b2c:	47 70       	andi	r20, 0x07	; 7
 b2e:	40 5d       	subi	r20, 0xD0	; 208
 b30:	41 93       	st	Z+, r20
 b32:	b3 e0       	ldi	r27, 0x03	; 3
 b34:	0f d0       	rcall	.+30     	; 0xb54 <__ultoa_invert+0x86>
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__ultoa_invert+0x5c>
 b38:	f6 cf       	rjmp	.-20     	; 0xb26 <__ultoa_invert+0x58>
 b3a:	46 2f       	mov	r20, r22
 b3c:	4f 70       	andi	r20, 0x0F	; 15
 b3e:	40 5d       	subi	r20, 0xD0	; 208
 b40:	4a 33       	cpi	r20, 0x3A	; 58
 b42:	18 f0       	brcs	.+6      	; 0xb4a <__ultoa_invert+0x7c>
 b44:	49 5d       	subi	r20, 0xD9	; 217
 b46:	31 fd       	sbrc	r19, 1
 b48:	40 52       	subi	r20, 0x20	; 32
 b4a:	41 93       	st	Z+, r20
 b4c:	02 d0       	rcall	.+4      	; 0xb52 <__ultoa_invert+0x84>
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <__ultoa_invert+0x6c>
 b50:	ea cf       	rjmp	.-44     	; 0xb26 <__ultoa_invert+0x58>
 b52:	b4 e0       	ldi	r27, 0x04	; 4
 b54:	a6 95       	lsr	r26
 b56:	97 95       	ror	r25
 b58:	87 95       	ror	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__ultoa_invert+0x86>
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	61 05       	cpc	r22, r1
 b66:	71 05       	cpc	r23, r1
 b68:	08 95       	ret
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	0a 2e       	mov	r0, r26
 b70:	06 94       	lsr	r0
 b72:	57 95       	ror	r21
 b74:	47 95       	ror	r20
 b76:	37 95       	ror	r19
 b78:	27 95       	ror	r18
 b7a:	ba 95       	dec	r27
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__ultoa_invert+0xa2>
 b7e:	62 0f       	add	r22, r18
 b80:	73 1f       	adc	r23, r19
 b82:	84 1f       	adc	r24, r20
 b84:	95 1f       	adc	r25, r21
 b86:	a0 1d       	adc	r26, r0
 b88:	08 95       	ret

00000b8a <__divmodsi4>:
 b8a:	05 2e       	mov	r0, r21
 b8c:	97 fb       	bst	r25, 7
 b8e:	1e f4       	brtc	.+6      	; 0xb96 <__divmodsi4+0xc>
 b90:	00 94       	com	r0
 b92:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__negsi2>
 b96:	57 fd       	sbrc	r21, 7
 b98:	07 d0       	rcall	.+14     	; 0xba8 <__divmodsi4_neg2>
 b9a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__udivmodsi4>
 b9e:	07 fc       	sbrc	r0, 7
 ba0:	03 d0       	rcall	.+6      	; 0xba8 <__divmodsi4_neg2>
 ba2:	4e f4       	brtc	.+18     	; 0xbb6 <__divmodsi4_exit>
 ba4:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__negsi2>

00000ba8 <__divmodsi4_neg2>:
 ba8:	50 95       	com	r21
 baa:	40 95       	com	r20
 bac:	30 95       	com	r19
 bae:	21 95       	neg	r18
 bb0:	3f 4f       	sbci	r19, 0xFF	; 255
 bb2:	4f 4f       	sbci	r20, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255

00000bb6 <__divmodsi4_exit>:
 bb6:	08 95       	ret

00000bb8 <__negsi2>:
 bb8:	90 95       	com	r25
 bba:	80 95       	com	r24
 bbc:	70 95       	com	r23
 bbe:	61 95       	neg	r22
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255
 bc2:	8f 4f       	sbci	r24, 0xFF	; 255
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	08 95       	ret

00000bc8 <__muluhisi3>:
 bc8:	0e 94 50 06 	call	0xca0	; 0xca0 <__umulhisi3>
 bcc:	a5 9f       	mul	r26, r21
 bce:	90 0d       	add	r25, r0
 bd0:	b4 9f       	mul	r27, r20
 bd2:	90 0d       	add	r25, r0
 bd4:	a4 9f       	mul	r26, r20
 bd6:	80 0d       	add	r24, r0
 bd8:	91 1d       	adc	r25, r1
 bda:	11 24       	eor	r1, r1
 bdc:	08 95       	ret

00000bde <__mulshisi3>:
 bde:	b7 ff       	sbrs	r27, 7
 be0:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__muluhisi3>

00000be4 <__mulohisi3>:
 be4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__muluhisi3>
 be8:	82 1b       	sub	r24, r18
 bea:	93 0b       	sbc	r25, r19
 bec:	08 95       	ret

00000bee <__prologue_saves__>:
 bee:	2f 92       	push	r2
 bf0:	3f 92       	push	r3
 bf2:	4f 92       	push	r4
 bf4:	5f 92       	push	r5
 bf6:	6f 92       	push	r6
 bf8:	7f 92       	push	r7
 bfa:	8f 92       	push	r8
 bfc:	9f 92       	push	r9
 bfe:	af 92       	push	r10
 c00:	bf 92       	push	r11
 c02:	cf 92       	push	r12
 c04:	df 92       	push	r13
 c06:	ef 92       	push	r14
 c08:	ff 92       	push	r15
 c0a:	0f 93       	push	r16
 c0c:	1f 93       	push	r17
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	cd b7       	in	r28, 0x3d	; 61
 c14:	de b7       	in	r29, 0x3e	; 62
 c16:	ca 1b       	sub	r28, r26
 c18:	db 0b       	sbc	r29, r27
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	de bf       	out	0x3e, r29	; 62
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	cd bf       	out	0x3d, r28	; 61
 c24:	09 94       	ijmp

00000c26 <__epilogue_restores__>:
 c26:	2a 88       	ldd	r2, Y+18	; 0x12
 c28:	39 88       	ldd	r3, Y+17	; 0x11
 c2a:	48 88       	ldd	r4, Y+16	; 0x10
 c2c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c2e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c30:	7d 84       	ldd	r7, Y+13	; 0x0d
 c32:	8c 84       	ldd	r8, Y+12	; 0x0c
 c34:	9b 84       	ldd	r9, Y+11	; 0x0b
 c36:	aa 84       	ldd	r10, Y+10	; 0x0a
 c38:	b9 84       	ldd	r11, Y+9	; 0x09
 c3a:	c8 84       	ldd	r12, Y+8	; 0x08
 c3c:	df 80       	ldd	r13, Y+7	; 0x07
 c3e:	ee 80       	ldd	r14, Y+6	; 0x06
 c40:	fd 80       	ldd	r15, Y+5	; 0x05
 c42:	0c 81       	ldd	r16, Y+4	; 0x04
 c44:	1b 81       	ldd	r17, Y+3	; 0x03
 c46:	aa 81       	ldd	r26, Y+2	; 0x02
 c48:	b9 81       	ldd	r27, Y+1	; 0x01
 c4a:	ce 0f       	add	r28, r30
 c4c:	d1 1d       	adc	r29, r1
 c4e:	0f b6       	in	r0, 0x3f	; 63
 c50:	f8 94       	cli
 c52:	de bf       	out	0x3e, r29	; 62
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	cd bf       	out	0x3d, r28	; 61
 c58:	ed 01       	movw	r28, r26
 c5a:	08 95       	ret

00000c5c <__udivmodsi4>:
 c5c:	a1 e2       	ldi	r26, 0x21	; 33
 c5e:	1a 2e       	mov	r1, r26
 c60:	aa 1b       	sub	r26, r26
 c62:	bb 1b       	sub	r27, r27
 c64:	fd 01       	movw	r30, r26
 c66:	0d c0       	rjmp	.+26     	; 0xc82 <__udivmodsi4_ep>

00000c68 <__udivmodsi4_loop>:
 c68:	aa 1f       	adc	r26, r26
 c6a:	bb 1f       	adc	r27, r27
 c6c:	ee 1f       	adc	r30, r30
 c6e:	ff 1f       	adc	r31, r31
 c70:	a2 17       	cp	r26, r18
 c72:	b3 07       	cpc	r27, r19
 c74:	e4 07       	cpc	r30, r20
 c76:	f5 07       	cpc	r31, r21
 c78:	20 f0       	brcs	.+8      	; 0xc82 <__udivmodsi4_ep>
 c7a:	a2 1b       	sub	r26, r18
 c7c:	b3 0b       	sbc	r27, r19
 c7e:	e4 0b       	sbc	r30, r20
 c80:	f5 0b       	sbc	r31, r21

00000c82 <__udivmodsi4_ep>:
 c82:	66 1f       	adc	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	99 1f       	adc	r25, r25
 c8a:	1a 94       	dec	r1
 c8c:	69 f7       	brne	.-38     	; 0xc68 <__udivmodsi4_loop>
 c8e:	60 95       	com	r22
 c90:	70 95       	com	r23
 c92:	80 95       	com	r24
 c94:	90 95       	com	r25
 c96:	9b 01       	movw	r18, r22
 c98:	ac 01       	movw	r20, r24
 c9a:	bd 01       	movw	r22, r26
 c9c:	cf 01       	movw	r24, r30
 c9e:	08 95       	ret

00000ca0 <__umulhisi3>:
 ca0:	a2 9f       	mul	r26, r18
 ca2:	b0 01       	movw	r22, r0
 ca4:	b3 9f       	mul	r27, r19
 ca6:	c0 01       	movw	r24, r0
 ca8:	a3 9f       	mul	r26, r19
 caa:	70 0d       	add	r23, r0
 cac:	81 1d       	adc	r24, r1
 cae:	11 24       	eor	r1, r1
 cb0:	91 1d       	adc	r25, r1
 cb2:	b2 9f       	mul	r27, r18
 cb4:	70 0d       	add	r23, r0
 cb6:	81 1d       	adc	r24, r1
 cb8:	11 24       	eor	r1, r1
 cba:	91 1d       	adc	r25, r1
 cbc:	08 95       	ret

00000cbe <_exit>:
 cbe:	f8 94       	cli

00000cc0 <__stop_program>:
 cc0:	ff cf       	rjmp	.-2      	; 0xcc0 <__stop_program>
